# bot.py

import discord
from discord.ext import commands, tasks
import os
import json
import asyncio
import random
import time
from dotenv import load_dotenv

# C√°c module qu·∫£n l√Ω c·ªßa ch√∫ng ta
import data_manager
import market_manager
from keep_alive import keep_alive # D√†nh cho Replit
import config

# --- T·∫£i TOKEN t·ª´ file .env ---
load_dotenv() 
TOKEN = os.getenv('DISCORD_BOT_TOKEN')
if not TOKEN:
    print("L·ªói: Kh√¥ng t√¨m th·∫•y DISCORD_BOT_TOKEN trong file .env ho·∫∑c bi·∫øn m√¥i tr∆∞·ªùng.")
    exit()

# --- Kh·ªüi t·∫°o Bot ---
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix='!', intents=intents)


# --- C√ÅC T√ÅC V·ª§ N·ªÄN (BACKGROUND TASKS) ---

@tasks.loop(minutes=3)
async def auto_save_data():
    """T·ª± ƒë·ªông l∆∞u d·ªØ li·ªáu ng∆∞·ªùi ch∆°i m·ªói 3 ph√∫t."""
    await bot.wait_until_ready()
    print("ƒêang t·ª± ƒë·ªông l∆∞u d·ªØ li·ªáu ng∆∞·ªùi ch∆°i...")
    data_manager.save_player_data()

@tasks.loop(seconds=30)
async def check_harvest_notifications():
    """Ki·ªÉm tra v√† g·ª≠i th√¥ng b√°o thu ho·∫°ch, ƒë·ªìng th·ªùi ki·ªÉm tra t·ªâ l·ªá c√¢y kh·ªïng l·ªì."""
    # Ch·ªù cho ƒë·∫øn khi bot s·∫µn s√†ng v√† ƒë√£ t·∫£i d·ªØ li·ªáu
    await bot.wait_until_ready()
    
    current_time = time.time()
    # T·∫°o m·ªôt b·∫£n copy c·ªßa c√°c key ƒë·ªÉ tr√°nh l·ªói khi dict thay ƒë·ªïi trong l√∫c l·∫∑p
    player_ids = list(data_manager.GAME_DATA.keys())

    # print("--- [BACKGROUND TASK] Running notification check... ---") # C√≥ th·ªÉ b·∫≠t d√≤ng n√†y ƒë·ªÉ debug

    for user_id in player_ids:
        # B·ªçc logic c·ªßa m·ªói ng∆∞·ªùi d√πng trong try-except ƒë·ªÉ l·ªói c·ªßa 1 ng∆∞·ªùi kh√¥ng l√†m h·ªèng c·∫£ t√°c v·ª•
        try:
            user_data = data_manager.get_player_data(user_id)
            if not user_data: continue

            farm_data = user_data.get('farm', {})
            plots = farm_data.get('plots', {})
            
            # N·∫øu c·ªù th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c g·ª≠i, kh√¥ng c·∫ßn ki·ªÉm tra g√¨ th√™m cho ng∆∞·ªùi n√†y
            if farm_data.get('notification_sent', True):
                continue

            all_plots_ready = True
            has_planted_crops = False

            for plot_data in plots.values():
                if not plot_data: continue
                
                has_planted_crops = True
                
                # N·∫øu c√≥ √≠t nh·∫•t 1 c√¢y ch∆∞a ch√≠n, th√¨ ch∆∞a th·ªÉ c√≥ th√¥ng b√°o "t·∫•t c·∫£ ƒë√£ s·∫µn s√†ng"
                if current_time < plot_data.get('ready_time', float('inf')):
                    all_plots_ready = False
                    continue # B·ªè qua c√¢y n√†y v√† ƒëi ƒë·∫øn c√¢y ti·∫øp theo
                
                # N·∫øu c√¢y ƒë√£ ch√≠n nh∆∞ng ch∆∞a ƒë∆∞·ª£c ki·ªÉm tra t·ªâ l·ªá kh·ªïng l·ªì
                if not plot_data.get('is_giant') and not plot_data.get('checked_for_giant'):
                    plot_data['checked_for_giant'] = True # ƒê√°nh d·∫•u ƒë√£ ki·ªÉm tra ƒë·ªÉ kh√¥ng l·∫∑p l·∫°i
                    
                    crop_id = plot_data.get('crop')
                    # Th·ª≠ v·∫≠n may
                    if crop_id and crop_id in config.GIANT_CROP_CANDIDATES and random.random() < config.GIANT_CROP_CHANCE:
                        plot_data['is_giant'] = True
                        try:
                            user = await bot.fetch_user(int(user_id))
                            crop_info = config.CROPS[crop_id]
                            await user.send(f"üåü Ch√∫c m·ª´ng! M·ªôt c√¢y **{crop_info['display_name']}** trong n√¥ng tr·∫°i c·ªßa b·∫°n ƒë√£ ph√°t tri·ªÉn th√†nh c√¢y **KH·ªîNG L·ªí**! D√πng `/harvest` ƒë·ªÉ thu ho·∫°ch n√≥ nh√©.")
                            print(f"ƒê√£ t·∫°o c√¢y kh·ªïng l·ªì {crop_id} cho {user.name}")
                        except Exception as e:
                            print(f"L·ªói khi g·ª≠i DM c√¢y kh·ªïng l·ªì cho {user_id}: {e}")

            # G·ª≠i th√¥ng b√°o thu ho·∫°ch chung n·∫øu t·∫•t c·∫£ c√¢y ƒë√£ ch√≠n v√† ch∆∞a g·ª≠i th√¥ng b√°o
            if has_planted_crops and all_plots_ready and not farm_data.get('notification_sent', True):
                try:
                    user = await bot.fetch_user(int(user_id))
                    await user.send("üîî **Th√¥ng b√°o:** T·∫•t c·∫£ c√¢y tr·ªìng trong n√¥ng tr·∫°i c·ªßa b·∫°n ƒë√£ s·∫µn s√†ng ƒë·ªÉ thu ho·∫°ch! D√πng l·ªánh `/harvest` ngay nh√©.")
                    farm_data['notification_sent'] = True
                    print(f"[SUCCESS] ƒê√£ g·ª≠i th√¥ng b√°o thu ho·∫°ch cho {user.name} ({user_id})")
                except Exception as e:
                    print(f"[ERROR] Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn thu ho·∫°ch cho ng∆∞·ªùi d√πng {user_id}: {e}")
                    # V·∫´n set ƒë·ªÉ kh√¥ng spam l·ªói
                    farm_data['notification_sent'] = True

        except Exception as e:
            # N·∫øu c√≥ b·∫•t k·ª≥ l·ªói n√†o x·∫£y ra v·ªõi d·ªØ li·ªáu c·ªßa ng∆∞·ªùi ch∆°i n√†y, in ra v√† ti·∫øp t·ª•c v·ªõi ng∆∞·ªùi ch∆°i kh√°c
            print(f"!!! [CRITICAL TASK ERROR] !!! L·ªói khi x·ª≠ l√Ω ng∆∞·ªùi d√πng {user_id}: {e}")
            import traceback
            traceback.print_exc()


@tasks.loop(hours=24)
async def update_market():
    await bot.wait_until_ready()
    market_manager.generate_supply_demand_events()
    channel_id = config.MARKET_EVENT_CHANNEL_ID
    if channel_id:
        try:
            channel = await bot.fetch_channel(channel_id)
            embed = discord.Embed(title="üìà B·∫£n Tin Th·ªã Tr∆∞·ªùng N√¥ng S·∫£n üìâ", description=market_manager.current_event_message, color=discord.Color.random())
            await channel.send(embed=embed)
            print("ƒê√£ c·∫≠p nh·∫≠t v√† th√¥ng b√°o s·ª± ki·ªán th·ªã tr∆∞·ªùng m·ªõi.")
        except Exception as e:
            print(f"Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o th·ªã tr∆∞·ªùng ƒë·∫øn k√™nh {channel_id}: {e}")

# --- S·ª∞ KI·ªÜN C·ª¶A BOT ---
@bot.event
async def on_ready():
    """S·ª± ki·ªán ƒë∆∞·ª£c k√≠ch ho·∫°t khi bot s·∫µn s√†ng v√† ƒë√£ t·∫£i xong m·ªçi th·ª©."""
    print(f'Bot ƒë√£ ƒëƒÉng nh·∫≠p v·ªõi t√™n: {bot.user}')
    print('------')
    data_manager.load_player_data()
    
    # B·∫ÆT ƒê·∫¶U T·∫§T C·∫¢ C√ÅC V√íNG L·∫∂P T√ÅC V·ª§ N·ªÄN
    auto_save_data.start()
    check_harvest_notifications.start()
    update_market.start()
    # check_giant_crops.start() # T·∫°m th·ªùi t·∫Øt v√¨ ƒë√£ g·ªôp logic

# --- H√ÄM MAIN V√Ä KH·ªêI CH·∫†Y CH√çNH ---
async def main():
    """H√†m ch√≠nh ƒë·ªÉ t·∫£i c√°c Cogs v√† kh·ªüi ƒë·ªông bot."""
    async with bot:
        for filename in os.listdir('./cogs'):
            if filename.endswith('.py'):
                try:
                    await bot.load_extension(f'cogs.{filename[:-3]}')
                    print(f'ƒê√£ t·∫£i th√†nh c√¥ng: {filename}')
                except Exception as e:
                    print(f'L·ªói khi t·∫£i {filename}: {e}')
        await bot.start(TOKEN)

if __name__ == "__main__":
    # D√†nh cho Replit hosting
    # keep_alive() 
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nPh√°t hi·ªán KeyboardInterrupt, ƒëang t·∫Øt bot...")
    finally:
        print("Th·ª±c hi·ªán l∆∞u d·ªØ li·ªáu l·∫ßn cu·ªëi...")
        data_manager.save_player_data()
        print("ƒê√£ l∆∞u. Bot ƒë√£ t·∫Øt ho√†n to√†n.")
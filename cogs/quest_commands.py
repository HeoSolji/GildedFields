# cogs/quest_commands.py
import discord
from discord.ext import commands
from discord import app_commands
import time, datetime
import data_manager, config, quest_manager

class QuestCommands(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    quests_group = app_commands.Group(name="quests", description="C√°c l·ªánh li√™n quan ƒë·∫øn nhi·ªám v·ª•.")


    def format_quest_embed(self, user_data, interaction):
        """T·∫°o embed hi·ªÉn th·ªã b·∫£ng nhi·ªám v·ª• (phi√™n b·∫£n hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß ph·∫ßn th∆∞·ªüng)."""
        user_quests = user_data.get('quests', {})
        embed = discord.Embed(title=f"üìú B·∫£ng Nhi·ªám v·ª• c·ªßa {interaction.user.name}", color=discord.Color.dark_gold())
        
        economy_cog = self.bot.get_cog('Economy')
        if not economy_cog:
            embed.description = "L·ªói: Kh√¥ng th·ªÉ t·∫£i module kinh t·∫ø."
            return embed

        # --- X·ª≠ l√Ω Nhi·ªám v·ª• h√†ng ng√†y ---
        daily_quests = user_quests.get('daily', [])
        daily_lines = []
        if daily_quests:
            for i, saved_quest in enumerate(daily_quests):
                quest_id = saved_quest.get('id')
                quest_template = next((q for q in config.QUEST_POOL['daily'] if q['id'] == quest_id), None)
                if not quest_template: continue
                
                npc_info = config.QUEST_NPCS.get(quest_template.get('npc'), {})
                target = quest_template.get('target_amount', '?')
                title = quest_template.get('title', 'N/A')
                
                # Logic l·∫•y ti·∫øn ƒë·ªô th√¥ng minh
                progress = 0
                quest_type = quest_template.get('type')

                if quest_type in ['collect', 'collect_quality']:
                    target_id = quest_template.get('target_id')
                    inventory_bucket = user_data.get('inventory', {}).get(target_id, {})
                    
                    if quest_type == 'collect_quality':
                        target_quality_str = str(quest_template.get('target_quality', 0))
                        progress = inventory_bucket.get(target_quality_str, 0)
                    else: # 'collect'
                        progress = sum(inventory_bucket.values())
                else: # Nhi·ªám v·ª• h√†nh ƒë·ªông
                    progress = saved_quest.get('progress', 0)
                
                # T·∫°o d√≤ng m√¥ t·∫£ m·ª•c ti√™u
                objective_text = quest_template.get('objective', 'Kh√¥ng c√≥ m√¥ t·∫£ chi ti·∫øt.')
                try:
                    if quest_template.get('type') in ['collect', 'collect_quality']:
                        item_name, item_emoji, _ = economy_cog._get_item_info(quest_template['target_id'], str(quest_template.get('target_quality', 0)))
                        objective_text = objective_text.format(amount=target, name=item_name, emoji=item_emoji)
                    else:
                        objective_text = objective_text.format(amount=target)
                except Exception as e:
                    print(f"L·ªói khi ƒë·ªãnh d·∫°ng objective text cho quest {quest_id}: {e}")
                    objective_text = "L·ªói hi·ªÉn th·ªã m·ª•c ti√™u."

                reward = quest_template.get('reward', {})
                reward_parts = []
                if reward.get('money', 0) > 0:
                    reward_parts.append(f"{reward['money']}{config.CURRENCY_SYMBOL}")
                if reward.get('xp', 0) > 0:
                    reward_parts.append(f"{reward['xp']} XP")
                if reward.get('rep', 0) > 0:
                    reward_parts.append(f"{reward['rep']}‚ù§Ô∏è") # D√πng emoji tr√°i tim cho ƒëi·ªÉm th√¢n thi·ªán
                reward_str = " | ".join(reward_parts)

                status = "‚úÖ **Ho√†n th√†nh!**" if progress >= target else f"Ti·∫øn ƒë·ªô: {progress}/{target}"
                daily_lines.append(
                    f"**{i+1}. {npc_info.get('emoji', '')} {title}**\n"
                    f"*‚îî {objective_text}*\n"
                    f"`{status}`\n"
                    f"`üéÅ Ph·∫ßn th∆∞·ªüng: {reward_str}`"
                )

            time_left = (user_quests.get('last_updated', 0) + quest_manager.SECONDS_IN_A_DAY) - time.time()
            td = datetime.timedelta(seconds=int(time_left)) if time_left > 0 else "0:00:00"
            embed.add_field(name=f"Nhi·ªám v·ª• H√†ng ng√†y (l√†m m·ªõi sau `{str(td)}`)", value="\n\n".join(daily_lines), inline=False)
        else:
            embed.add_field(name="Nhi·ªám v·ª• H√†ng ng√†y", value="B·∫°n ch∆∞a c√≥ nhi·ªám v·ª• m·ªõi cho h√¥m nay ho·∫∑c ƒë√£ ho√†n th√†nh h·∫øt!", inline=False)

        # --- X·ª≠ l√Ω Nhi·ªám v·ª• ƒë·∫∑c bi·ªát ---
        special_quest = user_quests.get('special')
        special_quest = user_quests.get('special')
        if special_quest:
            # S·ªë th·ª© t·ª± c·ªßa nhi·ªám v·ª• ƒë·∫∑c bi·ªát s·∫Ω l√† s·ªë l∆∞·ª£ng nhi·ªám v·ª• h√†ng ng√†y + 1
            special_quest_index = len(daily_quests) + 1
            
            quest_id = special_quest.get('id')
            quest_template = next((q for q in config.QUEST_POOL['special'] if q['id'] == quest_id), None)

            if quest_template:
                npc_info = config.QUEST_NPCS.get(quest_template.get('npc'), {})
                target = quest_template.get('target_amount', '?')
                title = quest_template.get('title', 'N/A')
                
                # Logic l·∫•y ti·∫øn ƒë·ªô cho nhi·ªám v·ª• ƒë·∫∑c bi·ªát
                progress = 0
                quest_type = quest_template.get('type')
                if quest_type in ['collect', 'collect_quality']:
                    target_id = quest_template.get('target_id')
                    inventory_bucket = user_data.get('inventory', {}).get(target_id, {})
                    if quest_type == 'collect_quality':
                        target_quality_str = str(quest_template.get('target_quality', 0))
                        progress = inventory_bucket.get(target_quality_str, 0)
                    else:
                        progress = sum(inventory_bucket.values())
                else:
                    progress = special_quest.get('progress', 0)

                objective_text = quest_template.get('objective', 'Kh√¥ng c√≥ m√¥ t·∫£ chi ti·∫øt.')
                try:
                    if quest_template.get('type') in ['collect', 'collect_quality']:
                        item_name, item_emoji, _ = economy_cog._get_item_info(quest_template['target_id'], str(quest_template.get('target_quality', 0)))
                        objective_text = objective_text.format(amount=target, name=item_name, emoji=item_emoji)
                    else:
                        objective_text = objective_text.format(amount=target)
                except Exception:
                    objective_text = "L·ªói hi·ªÉn th·ªã m·ª•c ti√™u."
                
                reward = quest_template.get('reward', {})
                reward_parts = []
                if reward.get('money', 0) > 0: reward_parts.append(f"{reward['money']}{config.CURRENCY_SYMBOL}")
                if reward.get('xp', 0) > 0: reward_parts.append(f"{reward['xp']} XP")
                if reward.get('rep', 0) > 0: reward_parts.append(f"{reward['rep']}‚ù§Ô∏è")
                reward_str = " | ".join(reward_parts)
                # ==========================================
                
                status = "‚úÖ **Ho√†n th√†nh!**" if progress >= target else f"Ti·∫øn ƒë·ªô: {progress}/{target}"
                
                special_line = (
                    f"**{special_quest_index}. {npc_info.get('emoji', '')} {title}**\n"
                    f"*‚îî {objective_text}*\n"
                    f"`{status}`\n"
                    f"`üéÅ Ph·∫ßn th∆∞·ªüng: {reward_str}`"
                )
                
                time_left = special_quest.get('expires_at', 0) - time.time()
                td = datetime.timedelta(seconds=int(time_left)) if time_left > 0 else "H·∫øt h·∫°n"
                embed.add_field(name=f"‚ú® Nhi·ªám v·ª• ƒê·∫∑c bi·ªát (k·∫øt th√∫c sau `{str(td)}`)", value=special_line, inline=False)
        
        embed.set_footer(text="D√πng /quests complete [s·ªë] ƒë·ªÉ tr·∫£ nhi·ªám v·ª• thu th·∫≠p.")
        return embed

    @quests_group.command(name="view", description="Xem b·∫£ng nhi·ªám v·ª• h√†ng ng√†y v√† ƒë·∫∑c bi·ªát c·ªßa b·∫°n.")
    async def quests_view(self, interaction: discord.Interaction):
        try:
            await interaction.response.defer(ephemeral=True)

            user_data = data_manager.get_player_data(interaction.user.id)
            if not user_data: 
                return await interaction.followup.send("B·∫°n ch∆∞a ƒëƒÉng k√Ω!")

            # L√†m m·ªõi nhi·ªám v·ª• n·∫øu c·∫ßn
            quest_manager.get_new_quests(user_data)
            
            embed = self.format_quest_embed(user_data, interaction)
            
            await interaction.followup.send(embed=embed)
        except Exception as e:
            print(f"L·ªói trong l·ªánh /quests view: {e}")
            if not interaction.response.is_done():
                await interaction.response.send_message("C√≥ l·ªói x·∫£y ra khi xem nhi·ªám v·ª•.", ephemeral=True)
            else:
                await interaction.followup.send("C√≥ l·ªói x·∫£y ra khi xem nhi·ªám v·ª•.", ephemeral=True)

    @quests_group.command(name="complete", description="Tr·∫£ nhi·ªám v·ª• thu th·∫≠p ƒë√£ ho√†n th√†nh.")
    @app_commands.describe(s·ªë_th·ª©_t·ª±="S·ªë th·ª© t·ª± c·ªßa nhi·ªám v·ª• b·∫°n mu·ªën tr·∫£.")
    async def quests_complete(self, interaction: discord.Interaction, s·ªë_th·ª©_t·ª±: int):
        try:
            await interaction.response.defer(ephemeral=True)
            user_data = data_manager.get_player_data(interaction.user.id)
            if not user_data: return await interaction.followup.send("B·∫°n ch∆∞a ƒëƒÉng k√Ω!")

            user_quests = user_data.get('quests', {})
            all_active_quests = user_quests.get('daily', []) + ([user_quests.get('special')] if user_quests.get('special') else [])
            
            index = s·ªë_th·ª©_t·ª± - 1
            if not (0 <= index < len(all_active_quests)):
                return await interaction.followup.send("S·ªë th·ª© t·ª± nhi·ªám v·ª• kh√¥ng h·ª£p l·ªá.")

            quest_to_complete = all_active_quests[index]
            quest_id = quest_to_complete.get('id')
            
            # T√¨m l·∫°i template c·ªßa quest trong config ƒë·ªÉ l·∫•y th√¥ng tin ƒë·∫ßy ƒë·ªß
            quest_pool = config.QUEST_POOL.get('daily', []) + config.QUEST_POOL.get('special', [])
            quest_template = next((q for q in quest_pool if q['id'] == quest_id), None)
            if not quest_template:
                return await interaction.followup.send("L·ªói: Kh√¥ng t√¨m th·∫•y th√¥ng tin g·ªëc c·ªßa nhi·ªám v·ª• n√†y.")

            quest_type = quest_template.get('type')
            if quest_type not in ['collect', 'collect_quality']:
                return await interaction.followup.send("B·∫°n kh√¥ng th·ªÉ tr·∫£ nhi·ªám v·ª• lo·∫°i n√†y theo c√°ch th·ªß c√¥ng.")

            # Ki·ªÉm tra xem ƒë√£ ƒë·ªß v·∫≠t ph·∫©m ch∆∞a
            target_id = quest_template.get('target_id')
            target_amount = quest_template.get('target_amount', 0)
            inventory_bucket = user_data.get('inventory', {}).get(target_id, {})
            
            current_amount = 0
            if quest_type == 'collect_quality':
                target_quality_str = str(quest_template.get('target_quality', 0))
                current_amount = inventory_bucket.get(target_quality_str, 0)
            else: # 'collect'
                current_amount = sum(inventory_bucket.values())

            if current_amount < target_amount:
                return await interaction.followup.send(f"B·∫°n ch∆∞a thu th·∫≠p ƒë·ªß v·∫≠t ph·∫©m! C·∫ßn {target_amount}, b·∫°n ƒëang c√≥ {current_amount}.")

            # --- N·∫øu ƒë·ªß, ti·∫øn h√†nh tr·∫£ nhi·ªám v·ª• ---
            
            # 1. Tr·ª´ v·∫≠t ph·∫©m (∆∞u ti√™n ch·∫•t l∆∞·ª£ng th·∫•p tr∆∞·ªõc)
            amount_to_remove = target_amount
            if quest_type == 'collect_quality':
                target_quality_str = str(quest_template.get('target_quality', 0))
                user_data['inventory'][target_id][target_quality_str] -= amount_to_remove
                if user_data['inventory'][target_id][target_quality_str] <= 0: del user_data['inventory'][target_id][target_quality_str]
            else: # 'collect'
                for quality_str in sorted(inventory_bucket.keys(), key=int):
                    if amount_to_remove <= 0: break
                    can_remove = min(amount_to_remove, inventory_bucket[quality_str])
                    inventory_bucket[quality_str] -= can_remove
                    if inventory_bucket[quality_str] <= 0: del inventory_bucket[quality_str]
                    amount_to_remove -= can_remove
            
            if not user_data['inventory'][target_id]: del user_data['inventory'][target_id]

            # 2. X√≥a nhi·ªám v·ª• kh·ªèi danh s√°ch active
            if quest_to_complete in user_quests.get('daily', []):
                user_quests['daily'].remove(quest_to_complete)
            elif quest_to_complete == user_quests.get('special'):
                user_quests['special'] = None

            # 3. Trao th∆∞·ªüng
            reward = quest_template.get('reward', {})
            money_reward = reward.get('money', 0)
            xp_reward = reward.get('xp', 0)
            rep_reward = reward.get('rep', 0)
            npc_id = quest_template.get('npc')

            user_data['balance'] += money_reward
            user_data['xp'] += xp_reward
            if npc_id:
                user_quests.setdefault('reputation', {})[npc_id] = user_quests.setdefault('reputation', {}).get(npc_id, 0) + rep_reward
            
            # 4. G·ª≠i th√¥ng b√°o
            npc_info = config.QUEST_NPCS.get(npc_id, {})
            embed = discord.Embed(title=f"‚úÖ Tr·∫£ Nhi·ªám v·ª• Th√†nh c√¥ng!", color=discord.Color.green())
            embed.description = f"B·∫°n ƒë√£ ho√†n th√†nh nhi·ªám v·ª• **'{quest_template.get('title')}'** cho {npc_info.get('name')} {npc_info.get('emoji')}."
            embed.add_field(name="Ph·∫ßn th∆∞·ªüng nh·∫≠n ƒë∆∞·ª£c", value=f"üí∞ {money_reward} | ‚ú® {xp_reward} XP | ‚ù§Ô∏è {rep_reward} ƒëi·ªÉm th√¢n thi·ªán")
            
            await interaction.followup.send(embed=embed)
            data_manager.save_player_data()

        except Exception as e:
            print(f"L·ªói trong l·ªánh /quests complete: {e}")
            await interaction.followup.send("C√≥ l·ªói x·∫£y ra khi tr·∫£ nhi·ªám v·ª•.", ephemeral=True)


async def setup(bot):
    await bot.add_cog(QuestCommands(bot))
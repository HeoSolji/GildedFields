# cogs/crafting_commands.py

import discord
from discord.ext import commands
from discord import app_commands
import data_manager
import config
import achievement_manager
import math
import utils

class CraftingCommands(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    def get_ingredient_string(self, ingredients):
        lines = []
        for item_key, quantity in ingredients.items():
            item_type, item_id = item_key.split('_', 1)
            emoji, name = "‚ùì", "?"
            if item_type == 'harvest':
                emoji, name = config.CROPS[item_id]['emoji'], config.CROPS[item_id]['display_name']
            elif item_type == 'product':
                emoji, name = config.PRODUCTS[item_id]['emoji'], config.PRODUCTS[item_id]['display_name']
            lines.append(f"{emoji} {name}: {quantity}")
        return ", ".join(lines)

    @app_commands.command(name="craftlist", description="Xem danh s√°ch t·∫•t c·∫£ c√°c c√¥ng th·ª©c ch·∫ø t·∫°o.")
    async def craft_list(self, interaction: discord.Interaction):
        embed = discord.Embed(title="üìú S·ªï tay C√¥ng th·ª©c Ch·∫ø t·∫°o", color=discord.Color.orange())
        if not config.RECIPES:
            embed.description = "Hi·ªán ch∆∞a c√≥ c√¥ng th·ª©c n√†o."
            return await interaction.response.send_message(embed=embed)
        
        recipes = list(config.RECIPES.items())
        description_lines = []
        for index, (recipe_id, recipe_info) in enumerate(recipes):
            ingredient_str = self.get_ingredient_string(recipe_info['ingredients'])
            line = (f"**{index + 1}.** {recipe_info['emoji']} **{recipe_info['display_name']}**\n"
                    f"   **C·∫ßn:** {ingredient_str}\n"
                    f"   **Gi√° b√°n:** {recipe_info['sell_price']} {config.CURRENCY_SYMBOL}")
            description_lines.append(line)
        
        embed.description = "\n\n".join(description_lines)
        embed.set_footer(text="D√πng /craft [s·ªë] [l∆∞·ª£ng] ƒë·ªÉ ch·∫ø t·∫°o")
        await interaction.response.send_message(embed=embed)

    @app_commands.command(name="craft", description="Ch·∫ø t·∫°o v·∫≠t ph·∫©m t·ª´ c√¥ng th·ª©c (ch·∫•t l∆∞·ª£ng ph·ª• thu·ªôc v√†o nguy√™n li·ªáu).")
    @app_commands.describe(s·ªë_th·ª©_t·ª±="S·ªë th·ª© t·ª± c·ªßa c√¥ng th·ª©c trong /craftlist.", s·ªë_l∆∞·ª£ng="S·ªë l∆∞·ª£ng b·∫°n mu·ªën ch·∫ø t·∫°o.")
    async def craft(self, interaction: discord.Interaction, s·ªë_th·ª©_t·ª±: int, s·ªë_l∆∞·ª£ng: int = 1):
        user_data = data_manager.get_player_data(interaction.user.id)
        if not user_data: return await interaction.response.send_message("B·∫°n ch∆∞a ƒëƒÉng k√Ω!", ephemeral=True)
        if s·ªë_l∆∞·ª£ng <= 0: return await interaction.response.send_message("S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0.", ephemeral=True)

        recipes = list(config.RECIPES.items())
        index = s·ªë_th·ª©_t·ª± - 1
        if not (0 <= index < len(recipes)): return await interaction.response.send_message(f"STT `{s·ªë_th·ª©_t·ª±}` kh√¥ng h·ª£p l·ªá.", ephemeral=True)

        recipe_id, recipe_info = recipes[index]
        ingredients_needed = recipe_info['ingredients']
        user_inventory = user_data['inventory']

        # --- KI·ªÇM TRA V√Ä S·ª¨ D·ª§NG NGUY√äN LI·ªÜU THEO CH·∫§T L∆Ø·ª¢NG ---
        
        # 1. Ki·ªÉm tra xem c√≥ ƒë·ªß t·ªïng s·ªë l∆∞·ª£ng kh√¥ng
        for item_key, required_quantity in ingredients_needed.items():
            total_owned = sum(user_inventory.get(item_key, {}).values())
            if total_owned < required_quantity * s·ªë_l∆∞·ª£ng:
                return await interaction.response.send_message(f"B·∫°n kh√¥ng ƒë·ªß nguy√™n li·ªáu! C·∫ßn {required_quantity * s·ªë_l∆∞·ª£ng} {item_key.replace('_', ' ')}.", ephemeral=True)
        
        # 2. S·ª≠ d·ª•ng nguy√™n li·ªáu v√† t√≠nh t·ªïng ƒëi·ªÉm ch·∫•t l∆∞·ª£ng
        total_quality_points = 0
        total_ingredients_count = 0
        
        for _ in range(s·ªë_l∆∞·ª£ng): # L·∫∑p l·∫°i cho m·ªói v·∫≠t ph·∫©m mu·ªën ch·∫ø t·∫°o
            for item_key, required_quantity in ingredients_needed.items():
                amount_to_consume = required_quantity
                
                # Lu√¥n ∆∞u ti√™n d√πng nguy√™n li·ªáu ch·∫•t l∆∞·ª£ng th·∫•p tr∆∞·ªõc (0 -> 1 -> 2 -> 3)
                for quality in sorted(user_inventory.get(item_key, {}).keys(), key=int):
                    if amount_to_consume == 0: break
                    
                    available_amount = user_inventory[item_key][quality]
                    consume = min(amount_to_consume, available_amount)
                    
                    total_quality_points += int(quality) * consume
                    total_ingredients_count += consume
                    
                    user_inventory[item_key][quality] -= consume
                    if user_inventory[item_key][quality] == 0:
                        del user_inventory[item_key][quality]
                    
                    amount_to_consume -= consume
                
                if not user_inventory[item_key]: # D·ªçn d·∫πp n·∫øu kh√¥ng c√≤n c·∫•p sao n√†o
                    del user_inventory[item_key]

        # 3. Quy·∫øt ƒë·ªãnh ch·∫•t l∆∞·ª£ng s·∫£n ph·∫©m
        # L√†m tr√≤n ch·∫•t l∆∞·ª£ng trung b√¨nh
        final_quality = round(total_quality_points / total_ingredients_count) if total_ingredients_count > 0 else 0
        quality_str = str(final_quality)
        
        # 4. Th√™m v·∫≠t ph·∫©m ƒë√£ ch·∫ø t·∫°o v√†o kho
        crafted_item_key = f"crafted_{recipe_id}"
        user_inventory.setdefault(crafted_item_key, {})[quality_str] = user_inventory.setdefault(crafted_item_key, {}).get(quality_str, 0) + s·ªë_l∆∞·ª£ng
        
        star_emoji = config.STAR_EMOJIS.get(final_quality, "")
        await interaction.response.send_message(f"B·∫°n ƒë√£ ch·∫ø t·∫°o th√†nh c√¥ng {s·ªë_l∆∞·ª£ng} {recipe_info['emoji']} **{recipe_info['display_name']}{star_emoji}**!")
        
        await achievement_manager.check_achievements(interaction, user_data, "craft", event_id=recipe_id, amount=s·ªë_l∆∞·ª£ng)
        data_manager.save_player_data()


async def setup(bot):
    await bot.add_cog(CraftingCommands(bot))
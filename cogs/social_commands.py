# cogs/social_commands.py

import discord
from discord.ext import commands
from discord import app_commands
import data_manager
import config

# --- VIEW V·ªöI N√öT B·∫§M ƒê·ªÇ X√ÅC NH·∫¨N ---
class ConfirmGiftView(discord.ui.View):
    def __init__(self, sender, receiver, item_key, amount, item_name, item_emoji):
        super().__init__(timeout=30.0) # H·∫øt h·∫°n sau 30 gi√¢y
        self.sender = sender
        self.receiver = receiver
        self.item_key = item_key
        self.amount = amount
        self.item_name = item_name
        self.item_emoji = item_emoji

    async def on_timeout(self):
        # T·ª± ƒë·ªông v√¥ hi·ªáu h√≥a n√∫t v√† c·∫≠p nh·∫≠t tin nh·∫Øn khi h·∫øt gi·ªù
        for item in self.children:
            item.disabled = True
        await self.message.edit(content="ƒê√£ h·∫øt th·ªùi gian x√°c nh·∫≠n. Giao d·ªãch b·ªã h·ªßy.", view=self)

    # N√∫t x√°c nh·∫≠n
    @discord.ui.button(label="X√°c nh·∫≠n", style=discord.ButtonStyle.green)
    async def confirm(self, interaction: discord.Interaction, button: discord.ui.Button):
        # Ch·ªâ ng∆∞·ªùi g·ª≠i m·ªõi ƒë∆∞·ª£c b·∫•m
        if interaction.user.id != self.sender.id:
            return await interaction.response.send_message("ƒê√¢y kh√¥ng ph·∫£i giao d·ªãch c·ªßa b·∫°n!", ephemeral=True)

        sender_data = data_manager.get_player_data(self.sender.id)
        receiver_data = data_manager.get_player_data(self.receiver.id)

        # Ki·ªÉm tra l·∫°i l·∫ßn cu·ªëi
        if sender_data['inventory'].get(self.item_key, 0) < self.amount:
            return await interaction.response.edit_message(content="L·ªói: B·∫°n kh√¥ng c√≤n ƒë·ªß v·∫≠t ph·∫©m ƒë·ªÉ t·∫∑ng.", view=None)

        # Th·ª±c hi·ªán giao d·ªãch
        sender_data['inventory'][self.item_key] -= self.amount
        if sender_data['inventory'][self.item_key] == 0: del sender_data['inventory'][self.item_key]
        receiver_data['inventory'][self.item_key] = receiver_data['inventory'].get(self.item_key, 0) + self.amount
        data_manager.save_player_data()

        await achievement_manager.check_achievements(interaction, sender_data, "gift")
        
        # V√¥ hi·ªáu h√≥a c√°c n√∫t v√† c·∫≠p nh·∫≠t tin nh·∫Øn
        for item in self.children:
            item.disabled = True
        await interaction.response.edit_message(content=f"‚úÖ Giao d·ªãch th√†nh c√¥ng! B·∫°n ƒë√£ t·∫∑ng {self.amount} {self.item_emoji} {self.item_name} cho {self.receiver.mention}.", view=self)
        try:
            await self.receiver.send(f"üéÅ B·∫°n v·ª´a nh·∫≠n ƒë∆∞·ª£c **{self.amount} {self.item_emoji} {self.item_name}** t·ª´ {self.sender.mention}!")
        except discord.Forbidden:
            pass

    # N√∫t h·ªßy
    @discord.ui.button(label="H·ªßy", style=discord.ButtonStyle.red)
    async def cancel(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.sender.id:
            return await interaction.response.send_message("ƒê√¢y kh√¥ng ph·∫£i giao d·ªãch c·ªßa b·∫°n!", ephemeral=True)
        
        for item in self.children:
            item.disabled = True
        await interaction.response.edit_message(content="ƒê√£ h·ªßy giao d·ªãch.", view=self)


class SocialCommands(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    def _get_inventory_items(self, user_data): # H√†m tr·ª£ gi√∫p
        # ... (Sao ch√©p l·∫°i h√†m _get_inventory_items t·ª´ economy_commands)
        items = []
        inv = user_data.get("inventory", {})
        for k in sorted(inv.keys()):
            if inv[k] > 0: items.append(k)
        return items

    def _get_item_info(self, item_key): # H√†m tr·ª£ gi√∫p
        item_type, item_id = item_key.split('_', 1)
        name, emoji = "?", "‚ùì"
        if item_type == "crafted": r = config.RECIPES.get(item_id, {}); name, emoji = r.get('display_name'), r.get('emoji')
        elif item_type == "seed": c = config.CROPS.get(item_id, {}); name, emoji = f"H·∫°t {c.get('display_name')}", c.get('emoji')
        elif item_type == "harvest": c = config.CROPS.get(item_id, {}); name, emoji = c.get('display_name'), c.get('emoji')
        elif item_type == "product": p = config.PRODUCTS.get(item_id, {}); name, emoji = p.get('display_name'), p.get('emoji')
        return name, emoji

    @app_commands.command(name="gift", description="T·∫∑ng v·∫≠t ph·∫©m trong kho ƒë·ªì cho ng∆∞·ªùi kh√°c.")
    @app_commands.describe(ng∆∞·ªùi_nh·∫≠n="Ng∆∞·ªùi b·∫°n mu·ªën t·∫∑ng qu√†.", s·ªë_th·ª©_t·ª±="S·ªë th·ª© t·ª± c·ªßa v·∫≠t ph·∫©m trong /inventory.", s·ªë_l∆∞·ª£ng="S·ªë l∆∞·ª£ng b·∫°n mu·ªën t·∫∑ng.")
    async def gift(self, interaction: discord.Interaction, ng∆∞·ªùi_nh·∫≠n: discord.Member, s·ªë_th·ª©_t·ª±: int, s·ªë_l∆∞·ª£ng: int):
        sender = interaction.user
        if sender == ng∆∞·ªùi_nh·∫≠n: return await interaction.response.send_message("B·∫°n kh√¥ng th·ªÉ t·∫∑ng qu√† cho ch√≠nh m√¨nh!", ephemeral=True)
        if s·ªë_l∆∞·ª£ng <= 0: return await interaction.response.send_message("S·ªë l∆∞·ª£ng qu√† t·∫∑ng ph·∫£i l·ªõn h∆°n 0.", ephemeral=True)

        sender_data = data_manager.get_player_data(sender.id)
        if not data_manager.get_player_data(ng∆∞·ªùi_nh·∫≠n.id): return await interaction.response.send_message(f"Ng∆∞·ªùi ch∆°i {ng∆∞·ªùi_nh·∫≠n.mention} ch∆∞a ƒëƒÉng k√Ω game.", ephemeral=True)

        inventory_items = self._get_inventory_items(sender_data)
        index = s·ªë_th·ª©_t·ª± - 1

        if not (0 <= index < len(inventory_items)): return await interaction.response.send_message(f"STT `{s·ªë_th·ª©_t·ª±}` kh√¥ng h·ª£p l·ªá.", ephemeral=True)

        item_key = inventory_items[index]
        item_name, item_emoji = self._get_item_info(item_key)
        
        if sender_data['inventory'].get(item_key, 0) < s·ªë_l∆∞·ª£ng: return await interaction.response.send_message(f"B·∫°n kh√¥ng c√≥ ƒë·ªß {s·ªë_l∆∞·ª£ng} {item_emoji} {item_name} ƒë·ªÉ t·∫∑ng.", ephemeral=True)
        
        view = ConfirmGiftView(sender, ng∆∞·ªùi_nh·∫≠n, item_key, s·ªë_l∆∞·ª£ng, item_name, item_emoji)
        
        message_content = f"{sender.mention}, b·∫°n c√≥ ch·∫Øc mu·ªën t·∫∑ng **{s·ªë_l∆∞·ª£ng} {item_emoji} {item_name}** cho {ng∆∞·ªùi_nh·∫≠n.mention} kh√¥ng?"
        await interaction.response.send_message(message_content, view=view)
        view.message = await interaction.original_response() # L∆∞u l·∫°i tin nh·∫Øn ƒë·ªÉ view c√≥ th·ªÉ edit


async def setup(bot):
    await bot.add_cog(SocialCommands(bot))
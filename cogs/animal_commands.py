# cogs/animal_commands.py

import discord
from discord.ext import commands
from discord import app_commands
import time
import datetime
import data_manager
import config
import utils

class BarnView(discord.ui.View):
    def __init__(self, user_id, timeout=180):
        super().__init__(timeout=timeout)
        self.user_id = user_id

    @discord.ui.button(label="Xem th·ªùi gian chi ti·∫øt", style=discord.ButtonStyle.secondary, emoji="‚è∞")
    async def show_times(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.user_id:
            return await interaction.response.send_message("ƒê√¢y kh√¥ng ph·∫£i chu·ªìng c·ªßa b·∫°n!", ephemeral=True)

        user_data = data_manager.get_player_data(self.user_id)
        if not user_data: return await interaction.response.send_message("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu.", ephemeral=True)

        animals_in_barn = user_data.get('barn', {}).get('animals', {})
        if not animals_in_barn: return await interaction.response.send_message("Chu·ªìng c·ªßa b·∫°n tr·ªëng tr∆°n.", ephemeral=True)
        
        current_time = time.time()
        lines = []
        for animal_id, ready_times in animals_in_barn.items():
            animal_info = config.ANIMALS.get(animal_id)
            if not animal_info or not ready_times: continue
            
            lines.append(f"**{animal_info['emoji']} {animal_info['display_name']}:**")
            
            # L·∫•y emoji c·ªßa con v·∫≠t ƒë·ªÉ d√πng trong danh s√°ch
            animal_emoji = animal_info['emoji']

            for i, ready_time in enumerate(ready_times):
                time_left = ready_time - current_time
                # S·ª¨A ƒê·ªîI: Thay "Con #" b·∫±ng emoji c·ªßa con v·∫≠t
                if time_left > 0:
                    lines.append(f"  ‚Ä¢ {animal_emoji}{i+1}: C√≤n l·∫°i `{str(datetime.timedelta(seconds=int(time_left)))}`")
                else:
                    lines.append(f"  ‚Ä¢ {animal_emoji}{i+1}: ‚úÖ ƒê√£ s·∫µn s√†ng!")
        
        content = "\n".join(lines)
        await interaction.response.send_message(content, ephemeral=True)

class AnimalCommands(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    barn = app_commands.Group(name="barn", description="C√°c l·ªánh li√™n quan ƒë·∫øn chu·ªìng nu√¥i c·ªßa b·∫°n.")

    @barn.command(name="view", description="Xem chu·ªìng nu√¥i v√† t√¨nh tr·∫°ng s·∫£n ph·∫©m.")
    async def barn_view(self, interaction: discord.Interaction):
        user_data = data_manager.get_player_data(interaction.user.id)
        if not user_data: return await interaction.response.send_message('B·∫°n ch∆∞a ƒëƒÉng k√Ω!', ephemeral=True)

        barn = user_data.get('barn', {'animals': {}, 'capacity': config.INITIAL_BARN_CAPACITY})
        animals_in_barn = barn.get('animals', {})
        capacity = barn.get('capacity', config.INITIAL_BARN_CAPACITY)
        current_animal_count = sum(len(animal_list) for animal_list in animals_in_barn.values())

        title = f"Chu·ªìng nu√¥i c·ªßa {interaction.user.name} (S·ª©c ch·ª©a: {current_animal_count}/{capacity})"
        embed = discord.Embed(title=title, color=discord.Color.from_rgb(188, 143, 143))

        if not animals_in_barn:
            embed.description = "Chu·ªìng c·ªßa b·∫°n tr·ªëng tr∆°n. D√πng `/shop` ƒë·ªÉ mua v·∫≠t nu√¥i."
            return await interaction.response.send_message(embed=embed)
        
        description_lines = []
        current_time = time.time()
        for animal_id, ready_times in animals_in_barn.items():
            if not ready_times: continue
            animal_info = config.ANIMALS.get(animal_id)
            if not animal_info: continue
            product_info = config.PRODUCTS.get(animal_info['product_id'])
            
            ready_count = sum(1 for rt in ready_times if current_time >= rt)
            waiting_list = [rt for rt in ready_times if current_time < rt]

            line = f"**{len(ready_times)}x** {animal_info['emoji']} **{animal_info['display_name']}** -> {product_info['emoji']} {product_info['display_name']}\n"
            if ready_count > 0:
                line += f"‚úÖ **{ready_count}** s·∫£n ph·∫©m ƒë√£ s·∫µn s√†ng!\n"
            if waiting_list:
                line += f"‚è≥ `{len(waiting_list)}` con kh√°c ƒëang ch·ªù..."
            description_lines.append(line)
        
        embed.description = "\n\n".join(description_lines)
        embed.set_footer(text="D√πng /collect ƒë·ªÉ thu ho·∫°ch. D√πng /barn upgrade ƒë·ªÉ n√¢ng c·∫•p.")
        await interaction.response.send_message(embed=embed, view=BarnView(user_id=interaction.user.id))

    @barn.command(name="upgrade", description="N√¢ng c·∫•p s·ª©c ch·ª©a chu·ªìng nu√¥i c·ªßa b·∫°n.")
    async def barn_upgrade(self, interaction: discord.Interaction):
        user_data = data_manager.get_player_data(interaction.user.id)
        if not user_data: return await interaction.response.send_message("B·∫°n ch∆∞a ƒëƒÉng k√Ω!", ephemeral=True)
            
        barn_data = user_data.get('barn', {})
        current_capacity = barn_data.get('capacity', config.INITIAL_BARN_CAPACITY)
        user_balance = user_data.get('balance', 0)
        user_level = user_data.get('level', 1)

        if current_capacity >= config.MAX_BARN_CAPACITY:
            return await interaction.response.send_message("Chu·ªìng c·ªßa b·∫°n ƒë√£ ƒë·∫°t s·ª©c ch·ª©a t·ªëi ƒëa!", ephemeral=True)

        # T√¨m c·∫•p n√¢ng c·∫•p ti·∫øp theo
        next_upgrade_level = None
        for capacity in sorted(config.BARN_UPGRADES.keys()):
            if capacity > current_capacity:
                next_upgrade_level = capacity
                break
        
        if next_upgrade_level is None:
            return await interaction.response.send_message("Kh√¥ng c√≥ th√¥ng tin n√¢ng c·∫•p n√†o cho chu·ªìng c·ªßa b·∫°n.", ephemeral=True)

        upgrade_info = config.BARN_UPGRADES[next_upgrade_level]
        cost = upgrade_info['cost']
        level_required = upgrade_info['level_required']

        # T·∫°o tin nh·∫Øn x√°c nh·∫≠n
        embed = discord.Embed(title="X√°c nh·∫≠n N√¢ng c·∫•p Chu·ªìng", color=discord.Color.blue())
        embed.description = (
            f"B·∫°n c√≥ ch·∫Øc mu·ªën n√¢ng c·∫•p s·ª©c ch·ª©a chu·ªìng l√™n **{next_upgrade_level}** kh√¥ng?\n\n"
            f"**Chi ph√≠:** {cost} {config.CURRENCY_SYMBOL}\n"
            f"**Y√™u c·∫ßu:** C·∫•p {level_required}\n\n"
            f"**S·ªë d∆∞ c·ªßa b·∫°n:** {user_balance} {config.CURRENCY_SYMBOL}"
        )

        if user_level < level_required:
            embed.description += f"\n\n‚ùå B·∫°n ch∆∞a ƒë·ªß c·∫•p ƒë·ªô!"
            return await interaction.response.send_message(embed=embed, ephemeral=True)
        if user_balance < cost:
            embed.description += f"\n\n‚ùå B·∫°n kh√¥ng c√≥ ƒë·ªß ti·ªÅn!"
            return await interaction.response.send_message(embed=embed, ephemeral=True)

        # N·∫øu ƒë·ªß ƒëi·ªÅu ki·ªán, th·ª±c hi·ªán n√¢ng c·∫•p
        user_data['balance'] -= cost
        user_data['barn']['capacity'] = next_upgrade_level
        data_manager.save_player_data()
        
        await interaction.response.send_message(f"üéâ **Ch√∫c m·ª´ng!** B·∫°n ƒë√£ chi {cost} {config.CURRENCY_SYMBOL} ƒë·ªÉ n√¢ng c·∫•p th√†nh c√¥ng s·ª©c ch·ª©a chu·ªìng l√™n **{next_upgrade_level}**!")

    @app_commands.command(name="collect", description="Thu ho·∫°ch t·∫•t c·∫£ s·∫£n ph·∫©m t·ª´ v·∫≠t nu√¥i.")
    async def collect(self, interaction: discord.Interaction):
        user_data = data_manager.get_player_data(interaction.user.id)
        if not user_data: return await interaction.response.send_message('B·∫°n ch∆∞a ƒëƒÉng k√Ω!', ephemeral=True)
        
        animals_in_barn = user_data.get('barn', {}).get('animals', {})
        if not animals_in_barn: return await interaction.response.send_message("B·∫°n kh√¥ng c√≥ con v·∫≠t n√†o ƒë·ªÉ thu ho·∫°ch.")

        await interaction.response.send_message("ƒêang ki·ªÉm tra v√† thu ho·∫°ch s·∫£n ph·∫©m...")

        collected_products = {}
        current_time = time.time()
        something_collected = False

        for animal_id, ready_times in animals_in_barn.items():
            animal_info = config.ANIMALS.get(animal_id)
            if not animal_info: continue
            
            still_producing_times = []
            for ready_time in ready_times:
                if current_time >= ready_time:
                    something_collected = True
                    product_id = animal_info['product_id']
                    quality = utils.determine_quality()
                    quality_str = str(quality)
                    collected_products.setdefault(product_id, {})[quality_str] = collected_products.setdefault(product_id, {}).get(quality_str, 0) + 1
                    
                    still_producing_times.append(current_time + animal_info['production_time'])
                else:
                    still_producing_times.append(ready_time)
            
            animals_in_barn[animal_id] = still_producing_times

        if not something_collected:
            return await interaction.edit_original_response(content="Ch∆∞a c√≥ s·∫£n ph·∫©m n√†o s·∫µn s√†ng ƒë·ªÉ thu ho·∫°ch.")

        lines = []
        for product_id, qualities in collected_products.items():
            inventory_key = f"product_{product_id}"
            user_data['inventory'].setdefault(inventory_key, {})
            
            for quality_str, quantity in qualities.items():
                user_data['inventory'][inventory_key][quality_str] = user_data['inventory'][inventory_key].get(quality_str, 0) + quantity
                star_emoji = config.STAR_EMOJIS.get(int(quality_str), "")
                product_info = config.PRODUCTS[product_id]
                lines.append(f"{quantity} {product_info['emoji']}{star_emoji}")
        user_data['barn']['notification_sent'] = True
        await interaction.followup.send(f"B·∫°n ƒë√£ thu ho·∫°ch th√†nh c√¥ng: {', '.join(lines)}.\nC√°c con v·∫≠t v·ª´a thu ho·∫°ch ƒë√£ b·∫Øt ƒë·∫ßu m·ªôt chu tr√¨nh s·∫£n xu·∫•t m·ªõi.")
        data_manager.save_player_data()


async def setup(bot):
    await bot.add_cog(AnimalCommands(bot))
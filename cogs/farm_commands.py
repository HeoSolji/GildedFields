# cogs/farm_commands.py

import discord
from discord.ext import commands
import time
import datetime
import data_manager
import config
import season_manager
import achievement_manager

# --- CLASS VIEW ƒê·ªÇ CH·ª®A N√öT B·∫§M CHO L·ªÜNH !FARM (Gi·ªØ nguy√™n) ---
class FarmView(discord.ui.View):
    def __init__(self, user_id, timeout=180):
        super().__init__(timeout=timeout)
        self.user_id = user_id

    @discord.ui.button(label="Xem th·ªùi gian", style=discord.ButtonStyle.secondary, emoji="‚è∞")
    async def show_times(self, interaction: discord.Interaction, button: discord.ui.Button):
        # ... (N·ªôi dung h√†m n√†y gi·ªØ nguy√™n)
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("ƒê√¢y kh√¥ng ph·∫£i n√¥ng tr·∫°i c·ªßa b·∫°n!", ephemeral=True)
            return
        user_data = data_manager.get_player_data(self.user_id)
        if not user_data:
            await interaction.response.send_message("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu c·ªßa b·∫°n.", ephemeral=True)
            return
        farm_plots = user_data["farm"]["plots"]
        current_time = time.time()
        growing_crops_details = []
        sorted_plots = sorted(farm_plots.items(), key=lambda item: (int(item[0].split('_')[0]), int(item[0].split('_')[1])))
        for plot_key, plot_data in sorted_plots:
            if plot_data and current_time < plot_data["ready_time"]:
                crop_info = config.CROPS[plot_data["crop"]]
                time_left_seconds = plot_data["ready_time"] - current_time
                td = datetime.timedelta(seconds=int(time_left_seconds))
                r, c = map(int, plot_key.split('_'))
                growing_crops_details.append(f"**√î ({r+1},{c+1})** {crop_info['emoji']}: C√≤n l·∫°i `{str(td)}`")
        content = "\n".join(growing_crops_details) if growing_crops_details else "B·∫°n kh√¥ng c√≥ c√¢y n√†o ƒëang l·ªõn c·∫£!"
        await interaction.response.send_message(content, ephemeral=True)


class Farm(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    # --- H√ÄM TR·ª¢ GI√öP M·ªöI ---
    def _get_plantable_seeds(self, user_data):
        """L·∫•y danh s√°ch c√°c lo·∫°i h·∫°t gi·ªëng c√≥ trong kho ƒë·ªì."""
        plantable_seeds = []
        inventory = user_data.get("inventory", {})
        for item_key in sorted(inventory.keys()):
            if inventory[item_key] > 0 and item_key.startswith("seed_"):
                plantable_seeds.append(item_key)
        return plantable_seeds

    # ... (H√†m check_for_level_up, farm, farm_upgrade gi·ªØ nguy√™n) ...
    async def check_for_level_up(self, ctx, user_data):
        level = user_data.get('level', 1)
        xp = user_data.get('xp', 0)
        xp_needed = config.get_xp_for_level(level)
        while xp >= xp_needed:
            user_data['level'] += 1
            user_data['xp'] -= xp_needed
            user_data['balance'] += config.REWARD_PER_LEVEL_UP
            level = user_data['level']
            xp = user_data['xp']
            xp_needed = config.get_xp_for_level(level)
            await ctx.send(f"üéâ **CH√öC M·ª™NG** {ctx.author.mention}! B·∫°n ƒë√£ l√™n **C·∫•p {level}**! B·∫°n nh·∫≠n ƒë∆∞·ª£c {config.REWARD_PER_LEVEL_UP} {config.CURRENCY_SYMBOL} ti·ªÅn th∆∞·ªüng.")

    @commands.group(name='farm', aliases=['f'], invoke_without_command=True)
    async def farm(self, ctx, member: discord.Member = None):
        target_user = member or ctx.author
        user_data = data_manager.get_player_data(target_user.id)
        if not user_data: return await ctx.send(f"Ng∆∞·ªùi ch∆°i {target_user.mention} ch∆∞a ƒëƒÉng k√Ω game!")
        farm_size = user_data["farm"]["size"]
        farm_plots = user_data["farm"]["plots"]
        current_time = time.time()
        farm_grid_display = []
        for r in range(farm_size):
            row_emojis = []
            for c in range(farm_size):
                plot_key = f"{r}_{c}"
                plot_data = farm_plots.get(plot_key)
                if not plot_data: row_emojis.append(config.PLOT_EMPTY_EMOJI)
                else:
                    if current_time >= plot_data["ready_time"]: row_emojis.append(config.PLOT_READY_EMOJI)
                    else: row_emojis.append(config.CROPS[plot_data["crop"]]["emoji"])
            farm_grid_display.append(" ".join(row_emojis))
        embed = discord.Embed(title=f"N√¥ng tr·∫°i c·ªßa {target_user.name} ({farm_size}x{farm_size})", description="\n".join(farm_grid_display), color=discord.Color.dark_green())
        if target_user == ctx.author:
            embed.set_footer(text="D√πng !farm upgrade ƒë·ªÉ n√¢ng c·∫•p. B·∫•m n√∫t ƒë·ªÉ xem th·ªùi gian.")
            view = FarmView(user_id=ctx.author.id)
            await ctx.send(embed=embed, view=view)
        else: await ctx.send(embed=embed)

    @farm.command(name='upgrade')
    async def farm_upgrade(self, ctx):
        try:
            user_data = data_manager.get_player_data(ctx.author.id)
            if not user_data: return await ctx.send("B·∫°n ch∆∞a ƒëƒÉng k√Ω. D√πng `!register` ƒë·ªÉ b·∫Øt ƒë·∫ßu!")
            current_size = user_data.get('farm', {}).get('size', config.FARM_GRID_SIZE)
            user_balance = user_data.get('balance', 0)
            user_level = user_data.get('level', 1)
            if current_size >= config.MAX_FARM_SIZE: return await ctx.send("N√¥ng tr·∫°i c·ªßa b·∫°n ƒë√£ ƒë·∫°t k√≠ch th∆∞·ªõc t·ªëi ƒëa!")
            next_size = current_size + 1
            upgrade_info = config.FARM_UPGRADES.get(next_size)
            if not upgrade_info: return await ctx.send("Kh√¥ng c√≥ th√¥ng tin n√¢ng c·∫•p cho k√≠ch th∆∞·ªõc ti·∫øp theo ho·∫∑c ƒë√£ ƒë·∫°t t·ªëi ƒëa.")
            cost = upgrade_info['cost']
            level_required = upgrade_info['level_required']
            if user_level < level_required: return await ctx.send(f"B·∫°n c·∫ßn ƒë·∫°t **C·∫•p {level_required}** ƒë·ªÉ n√¢ng c·∫•p l√™n {next_size}x{next_size}.")
            if user_balance < cost: return await ctx.send(f"B·∫°n kh√¥ng ƒë·ªß ti·ªÅn! C·∫ßn {cost} {config.CURRENCY_SYMBOL} ƒë·ªÉ n√¢ng c·∫•p, b·∫°n ch·ªâ c√≥ {user_balance}.")
            user_data['balance'] -= cost
            user_data['farm']['size'] = next_size
            for r in range(next_size):
                for c in range(next_size):
                    plot_key = f"{r}_{c}"
                    if plot_key not in user_data['farm']['plots']: user_data['farm']['plots'][plot_key] = None
            data_manager.save_player_data()
            await ctx.send(f"üéâ **Ch√∫c m·ª´ng!** B·∫°n ƒë√£ chi {cost} {config.CURRENCY_SYMBOL} ƒë·ªÉ n√¢ng c·∫•p th√†nh c√¥ng n√¥ng tr·∫°i l√™n k√≠ch th∆∞·ªõc **{next_size}x{next_size}**!")
        except Exception as e:
            print(f"L·ªói nghi√™m tr·ªçng trong l·ªánh !farm upgrade: {e}")
            import traceback; traceback.print_exc()
            await ctx.send(f"R·∫•t ti·∫øc, ƒë√£ c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω l·ªánh c·ªßa b·∫°n. Vui l√≤ng b√°o cho qu·∫£n tr·ªã vi√™n v√† g·ª≠i k√®m th√¥ng tin sau: `L·ªói trong farm/upgrade - {type(e).__name__}`")

    # --- L·ªÜNH M·ªöI ---
    @commands.command(name='seeds')
    async def seeds(self, ctx):
        """Xem danh s√°ch c√°c lo·∫°i h·∫°t gi·ªëng b·∫°n c√≥ th·ªÉ tr·ªìng."""
        user_data = data_manager.get_player_data(ctx.author.id)
        if not user_data: return await ctx.send('B·∫°n ch∆∞a ƒëƒÉng k√Ω!')

        plantable_seeds = self._get_plantable_seeds(user_data)
        if not plantable_seeds:
            return await ctx.send("B·∫°n kh√¥ng c√≥ h·∫°t gi·ªëng n√†o trong kho ƒë·ªì. D√πng `!shop` ƒë·ªÉ mua nh√©.")

        embed = discord.Embed(title=f"T√∫i h·∫°t gi·ªëng c·ªßa {ctx.author.name}", color=discord.Color.dark_green())
        lines = []
        for index, seed_key in enumerate(plantable_seeds):
            quantity = user_data["inventory"][seed_key]
            crop_id = seed_key.split('_', 1)[1]
            crop_info = config.CROPS.get(crop_id)
            if crop_info:
                lines.append(f"**{index + 1}.** {crop_info['emoji']} **H·∫°t {crop_info['display_name']}**: `{quantity}`")

        embed.description = "\n".join(lines)
        embed.set_footer(text="D√πng !plant [s·ªë] [l∆∞·ª£ng] ƒë·ªÉ tr·ªìng")
        await ctx.send(embed=embed)

    # --- L√ÄM L·∫†I HO√ÄN TO√ÄN L·ªÜNH PLANT ---
    @commands.command(name='plant', aliases=['p'])
    async def plant(self, ctx, item_index: int, amount: int = 1):
        """Tr·ªìng h·∫°t gi·ªëng t·ª´ t√∫i h·∫°t gi·ªëng c·ªßa b·∫°n (!seeds)."""
        try:
            user_data = data_manager.get_player_data(ctx.author.id)
            if not user_data: return await ctx.send('B·∫°n ch∆∞a ƒëƒÉng k√Ω!')
            if amount <= 0: return await ctx.send("S·ªë l∆∞·ª£ng tr·ªìng ph·∫£i l·ªõn h∆°n 0.")

            # L·∫•y danh s√°ch h·∫°t gi·ªëng t·ª´ kho ƒë·ªì c·ªßa ng∆∞·ªùi ch∆°i
            plantable_seeds = self._get_plantable_seeds(user_data)
            index = item_index - 1

            if not (0 <= index < len(plantable_seeds)):
                return await ctx.send(f"S·ªë th·ª© t·ª± `{item_index}` kh√¥ng h·ª£p l·ªá. D√πng `!seeds` ƒë·ªÉ xem l·∫°i.")

            seed_key = plantable_seeds[index]
            crop_id = seed_key.split('_', 1)[1]
            crop_info = config.CROPS[crop_id]
            
            # Ki·ªÉm tra m√πa
            current_season = season_manager.get_current_season()['name']
            if current_season not in crop_info['seasons']:
                return await ctx.send(f"Kh√¥ng th·ªÉ tr·ªìng {crop_info['display_name']} trong m√πa n√†y!")

            # Ki·ªÉm tra s·ªë l∆∞·ª£ng h·∫°t gi·ªëng s·ªü h·ªØu
            seeds_owned = user_data['inventory'].get(seed_key, 0)
            if seeds_owned < amount:
                return await ctx.send(f"B·∫°n kh√¥ng c√≥ ƒë·ªß {amount} h·∫°t {crop_info['display_name']}. B·∫°n ch·ªâ c√≥ {seeds_owned}.")

            # T√¨m √¥ ƒë·∫•t tr·ªëng v√† tr·ªìng c√¢y (logic n√†y gi·ªØ nguy√™n)
            empty_plots = [key for key, value in user_data['farm']['plots'].items() if value is None]
            if not empty_plots: return await ctx.send("T·∫•t c·∫£ √¥ ƒë·∫•t ƒë√£ ƒë∆∞·ª£c tr·ªìng! D√πng `!harvest` ƒë·ªÉ thu ho·∫°ch.")

            planted_count = 0
            current_time = time.time()
            for plot_key in sorted(empty_plots, key=lambda x: (int(x.split('_')[0]), int(x.split('_')[1]))):
                if planted_count >= amount: break
                user_data['farm']['plots'][plot_key] = {"crop": crop_id, "plant_time": current_time, "ready_time": current_time + crop_info["grow_time"]}
                user_data['inventory'][seed_key] -= 1
                planted_count += 1
            
            grow_time_str = config.get_grow_time_string(crop_info["grow_time"])
            await ctx.send(f"ƒê√£ tr·ªìng th√†nh c√¥ng {planted_count} {crop_info['emoji']} {crop_info['display_name']}. C√¢y s·∫Ω l·ªõn sau {grow_time_str}.")
            if planted_count < amount:
                await ctx.send(f"L∆∞u √Ω: Ch·ªâ tr·ªìng ƒë∆∞·ª£c {planted_count} c√¢y do kh√¥ng ƒë·ªß √¥ ƒë·∫•t tr·ªëng.")
            
            user_data['farm']['notification_sent'] = False

            data_manager.save_player_data()
        
        except Exception as e:
            print(f"L·ªói trong l·ªánh !plant: {e}")
            await ctx.send("C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán l·ªánh tr·ªìng c√¢y.")

    @commands.command(name='harvest', aliases=['h'])
    async def harvest(self, ctx):
        # ... (N·ªôi dung h√†m n√†y gi·ªØ nguy√™n) ...
        try:
            user_data = data_manager.get_player_data(ctx.author.id)
            if not user_data: return await ctx.send('B·∫°n ch∆∞a ƒëƒÉng k√Ω!')
            farm_plots = user_data['farm']['plots']
            current_time = time.time()
            harvested_items = {}
            plots_to_clear = []
            for plot_key, plot_data in farm_plots.items():
                if plot_data and current_time >= plot_data['ready_time']:
                    crop_id = plot_data['crop']
                    if crop_id in config.CROPS:
                        harvested_items[crop_id] = harvested_items.get(crop_id, 0) + 1
                        plots_to_clear.append(plot_key)
                    else:
                        print(f"Ph√°t hi·ªán c√¢y tr·ªìng kh√¥ng h·ª£p l·ªá '{crop_id}' trong farm c·ªßa {ctx.author.id}. S·∫Ω x√≥a b·ªè.")
                        plots_to_clear.append(plot_key)
            if not harvested_items:
                if plots_to_clear:
                    for plot_key in plots_to_clear: farm_plots[plot_key] = None
                    data_manager.save_player_data()
                    return await ctx.send("ƒê√£ d·ªçn d·∫πp m·ªôt s·ªë c√¢y tr·ªìng kh√¥ng c√≤n h·ª£p l·ªá kh·ªèi n√¥ng tr·∫°i c·ªßa b·∫°n.")
                else: return await ctx.send("Kh√¥ng c√≥ c√¢y n√†o s·∫µn s√†ng ƒë·ªÉ thu ho·∫°ch.")
            total_xp_gained = 0
            harvest_summary = []
            for crop_id, quantity in harvested_items.items():
                harvest_key = f"harvest_{crop_id}"
                user_data['inventory'][harvest_key] = user_data['inventory'].get(harvest_key, 0) + quantity
                crop_info = config.CROPS[crop_id]
                harvest_summary.append(f"{quantity} {crop_info['emoji']} {crop_info['display_name']}")
                total_xp_gained += config.XP_PER_CROP.get(crop_id, 0) * quantity
            for plot_key in plots_to_clear: farm_plots[plot_key] = None
            await ctx.send(f"{ctx.author.mention}, b·∫°n ƒë√£ thu ho·∫°ch th√†nh c√¥ng: {', '.join(harvest_summary)}.")
            if total_xp_gained > 0:
                user_data['xp'] = user_data.get('xp', 0) + total_xp_gained
                await ctx.send(f"B·∫°n nh·∫≠n ƒë∆∞·ª£c **{total_xp_gained} XP**!")
                await self.check_for_level_up(ctx, user_data)
            
            for crop_id, quantity in harvested_items.items():
                await achievement_manager.check_achievements(ctx, user_data, "harvest", event_id=crop_id, amount=quantity)

            if total_xp_gained > 0:
                user_data['xp'] += total_xp_gained
                await ctx.send(f"B·∫°n nh·∫≠n ƒë∆∞·ª£c **{total_xp_gained} XP**!")
                # Ki·ªÉm tra th√†nh t·ª±u l√™n c·∫•p
                leveled_up = await self.check_for_level_up(ctx, user_data)
                if leveled_up:
                    await achievement_manager.check_achievements(ctx, user_data, "level")
                    
            user_data['farm']['notification_sent'] = True
            data_manager.save_player_data()
        except Exception as e:
            print(f"L·ªói trong l·ªánh !harvest: {e}")
            import traceback; traceback.print_exc()
            await ctx.send("R·∫•t ti·∫øc, ƒë√£ c√≥ l·ªói x·∫£y ra khi thu ho·∫°ch. Vui l√≤ng th·ª≠ l·∫°i.")
        
    @commands.command(name='farmtime', aliases=['ftime'])
    async def farmtime(self, ctx):
        # ... (N·ªôi dung h√†m n√†y gi·ªØ nguy√™n) ...
        user_data = data_manager.get_player_data(ctx.author.id)
        if not user_data: return await ctx.send('B·∫°n ch∆∞a ƒëƒÉng k√Ω!')
        farm_plots = user_data["farm"]["plots"]
        current_time = time.time()
        growing_crops_details = []
        sorted_plots = sorted(farm_plots.items(), key=lambda item: (int(item[0].split('_')[0]), int(item[0].split('_')[1])))
        for plot_key, plot_data in sorted_plots:
            if plot_data and current_time < plot_data["ready_time"]:
                crop_info = config.CROPS[plot_data["crop"]]
                time_left_seconds = plot_data["ready_time"] - current_time
                td = datetime.timedelta(seconds=int(time_left_seconds))
                r, c = map(int, plot_key.split('_'))
                growing_crops_details.append(f"**√î ({r+1},{c+1})** {crop_info['emoji']} {crop_info['display_name']}: C√≤n l·∫°i `{str(td)}`")
        if not growing_crops_details: return await ctx.send("B·∫°n kh√¥ng c√≥ c√¢y n√†o ƒëang l·ªõn c·∫£!")
        embed = discord.Embed(title=f"Th·ªùi Gian C√¢y Tr·ªìng c·ªßa {ctx.author.name}", description="\n".join(growing_crops_details), color=discord.Color.from_rgb(139, 69, 19))
        embed.set_footer(text="Th·ªùi gian ƒë∆∞·ª£c hi·ªÉn th·ªã theo d·∫°ng Gi·ªù:Ph√∫t:Gi√¢y")
        await ctx.send(embed=embed)


async def setup(bot):
    await bot.add_cog(Farm(bot))
# cogs/machine_commands.py

import discord
from discord.ext import commands
from discord import app_commands
import random
import data_manager, config
import time, datetime

def get_all_harvested_crops(user_data):
    """L·∫•y danh s√°ch T·∫§T C·∫¢ c√°c n√¥ng s·∫£n ƒë√£ thu ho·∫°ch, kh√¥ng ph√¢n bi·ªát ch·∫•t l∆∞·ª£ng."""
    harvested = []
    inventory = user_data.get("inventory", {})
    for item_key, qualities in inventory.items():
        if item_key.startswith("harvest_"):
            if any(q > 0 for q in qualities.values()):
                crop_id = item_key.split('_', 1)[1]
                if crop_id not in config.SEED_MAKER_CONFIG.get('blacklist', []):
                    harvested.append(item_key)
    return sorted(harvested)

class MachineCommands(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    machine = app_commands.Group(name="machine", description="T∆∞∆°ng t√°c v·ªõi c√°c m√°y m√≥c c·ªßa b·∫°n.")

    async def machine_add_autocomplete(self, interaction: discord.Interaction, current: str):
        user_data = data_manager.get_player_data(interaction.user.id)
        if not user_data: return []
        
        choices = []
        processable_crops = get_all_harvested_crops(user_data)
        for item_key in processable_crops:
            crop_id = item_key.split('_', 1)[1]
            crop_name = config.CROPS[crop_id]['display_name']
            if current.lower() in crop_name.lower():
                choices.append(app_commands.Choice(name=crop_name, value=item_key))
        return choices[:25]

    @machine.command(name="view", description="Xem tr·∫°ng th√°i c·ªßa c√°c M√°y T·∫°o H·∫°t Gi·ªëng.")
    async def machine_view(self, interaction: discord.Interaction):
        try:
            await interaction.response.defer(ephemeral=True)
            user_data = data_manager.get_player_data(interaction.user.id)
            if not user_data: return await interaction.followup.send("B·∫°n ch∆∞a ƒëƒÉng k√Ω!")
            
            seed_makers = user_data.get('machines', {}).get('seed_maker', [])
            if not seed_makers:
                return await interaction.followup.send("B·∫°n ch∆∞a c√≥ M√°y T·∫°o H·∫°t Gi·ªëng n√†o. D√πng `/craftlist` ƒë·ªÉ xem c√°ch ch·∫ø t·∫°o.")

            embed = discord.Embed(
                title=f"üè≠ Nh√† x∆∞·ªüng c·ªßa {interaction.user.name}", 
                description="T·ªïng quan v·ªÅ c√°c M√°y T·∫°o H·∫°t Gi·ªëng c·ªßa b·∫°n.",
                color=discord.Color.light_grey()
            )
            
            for i, machine_data in enumerate(seed_makers):
                state = machine_data.get('state', 'idle')
                if state == 'idle':
                    embed.add_field(
                        name=f"M√°y #{i+1} üü¢ R·∫£nh r·ªói",
                        value="S·∫µn s√†ng nh·∫≠n n√¥ng s·∫£n m·ªõi.\nD√πng `/machine add`.",
                        inline=True
                    )
                else:
                    finish_time = machine_data.get('finish_time', 0)
                    time_left = finish_time - time.time()
                    input_key = machine_data.get('input_key', 'harvest_wheat')
                    crop_id = input_key.split('_', 1)[1]
                    crop_info = config.CROPS.get(crop_id, {})
                    
                    if time_left > 0:
                        td = datetime.timedelta(seconds=int(time_left))
                        embed.add_field(
                            name=f"M√°y #{i+1} üü° ƒêang ho·∫°t ƒë·ªông",
                            value=f"ƒêang x·ª≠ l√Ω: **{machine_data.get('input_qty', 0)}** {crop_info.get('emoji', '‚ùì')}\nHo√†n th√†nh sau: `{str(td)}`",
                            inline=True
                        )
                    else:
                        embed.add_field(
                            name=f"M√°y #{i+1} ‚úÖ ƒê√£ xong!",
                            value=f"**{machine_data.get('input_qty', 0)}** {crop_info.get('emoji', '‚ùì')} ƒëang ch·ªù thu ho·∫°ch.\nD√πng `/machine collect`.",
                            inline=True
                        )
            
            await interaction.followup.send(embed=embed)
        except Exception as e:
            print(f"L·ªói trong /machine view: {e}")
            await interaction.followup.send("C√≥ l·ªói x·∫£y ra khi xem m√°y.", ephemeral=True)

    @machine.command(name="add", description="B·ªè n√¥ng s·∫£n v√†o M√°y T·∫°o H·∫°t Gi·ªëng.")
    @app_commands.autocomplete(n√¥ng_s·∫£n=machine_add_autocomplete)
    @app_commands.describe(n√¥ng_s·∫£n="Lo·∫°i n√¥ng s·∫£n mu·ªën x·ª≠ l√Ω.", s·ªë_l∆∞·ª£ng="S·ªë l∆∞·ª£ng mu·ªën b·ªè v√†o.")
    async def machine_add(self, interaction: discord.Interaction, n√¥ng_s·∫£n: str, s·ªë_l∆∞·ª£ng: int):
        try:
            await interaction.response.defer()
            user_data = data_manager.get_player_data(interaction.user.id)
            if not user_data: return await interaction.followup.send("B·∫°n ch∆∞a ƒëƒÉng k√Ω!", ephemeral=True)
            if s·ªë_l∆∞·ª£ng <= 0: return await interaction.followup.send("S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0.", ephemeral=True)

            idle_machine = None
            seed_makers = user_data.get('machines', {}).get('seed_maker', [])
            for m in seed_makers:
                if m.get('state') == 'idle':
                    idle_machine = m
                    break
            
            if not idle_machine:
                return await interaction.followup.send("T·∫•t c·∫£ M√°y T·∫°o H·∫°t Gi·ªëng c·ªßa b·∫°n ƒë·ªÅu ƒëang b·∫≠n!", ephemeral=True)

            crop_id = n√¥ng_s·∫£n.split('_', 1)[1]
            crop_info = config.CROPS.get(crop_id)
            if not crop_info or not n√¥ng_s·∫£n.startswith("harvest_"):
                 return await interaction.followup.send("L·ª±a ch·ªçn n√¥ng s·∫£n kh√¥ng h·ª£p l·ªá.", ephemeral=True)

            if crop_id in config.SEED_MAKER_CONFIG.get('blacklist', []):
                return await interaction.followup.send(f"Kh√¥ng th·ªÉ d√πng M√°y T·∫°o H·∫°t Gi·ªëng cho {crop_info['display_name']}.", ephemeral=True)
            
            owned_qualities = user_data.get('inventory', {}).get(n√¥ng_s·∫£n, {})
            total_owned = sum(owned_qualities.values())
            if total_owned < s·ªë_l∆∞·ª£ng:
                return await interaction.followup.send(f"B·∫°n kh√¥ng c√≥ ƒë·ªß {s·ªë_l∆∞·ª£ng} {crop_info['display_name']} (t√≠nh c·∫£ c√°c c·∫•p sao).", ephemeral=True)

            # Tr·ª´ v·∫≠t ph·∫©m, ∆∞u ti√™n c·∫•p sao th·∫•p nh·∫•t
            amount_to_consume = s·ªë_l∆∞·ª£ng
            for quality_str in sorted(owned_qualities.keys(), key=int):
                if amount_to_consume <= 0: break
                available_in_bucket = owned_qualities[quality_str]
                consume = min(amount_to_consume, available_in_bucket)
                owned_qualities[quality_str] -= consume
                if owned_qualities[quality_str] == 0: del owned_qualities[quality_str]
                amount_to_consume -= consume
            if not owned_qualities: del user_data['inventory'][n√¥ng_s·∫£n]
            
            # C·∫≠p nh·∫≠t tr·∫°ng th√°i m√°y
            processing_time = s·ªë_l∆∞·ª£ng * config.SEED_MAKER_CONFIG['time_per_item']
            idle_machine['state'] = 'processing'
            idle_machine['input_key'] = n√¥ng_s·∫£n
            idle_machine['input_qty'] = s·ªë_l∆∞·ª£ng
            idle_machine['finish_time'] = time.time() + processing_time
            
            td = datetime.timedelta(seconds=int(processing_time))
            
            embed = discord.Embed(
                title="‚öôÔ∏è B·∫Øt ƒë·∫ßu X·ª≠ l√Ω",
                description=f"ƒê√£ b·ªè **{s·ªë_l∆∞·ª£ng}** {crop_info['emoji']} {crop_info['display_name']} v√†o m·ªôt m√°y r·∫£nh r·ªói.",
                color=discord.Color.yellow()
            )
            embed.add_field(name="Th·ªùi gian ho√†n th√†nh", value=f"`{str(td)}`")
            await interaction.followup.send(embed=embed)
            data_manager.save_player_data()
        except Exception as e:
            print(f"L·ªói trong l·ªánh /machine add: {e}")
            await interaction.followup.send("C√≥ l·ªói x·∫£y ra.", ephemeral=True)

    @machine.command(name="collect", description="Thu ho·∫°ch h·∫°t gi·ªëng t·ª´ c√°c m√°y ƒë√£ ch·∫°y xong.")
    async def machine_collect(self, interaction: discord.Interaction):
        try:
            await interaction.response.defer()
            user_data = data_manager.get_player_data(interaction.user.id)
            if not user_data: return await interaction.followup.send("B·∫°n ch∆∞a ƒëƒÉng k√Ω!", ephemeral=True)
            
            seed_makers = user_data.get('machines', {}).get('seed_maker', [])
            collected_summary = {}
            collected_anything = False

            for machine in seed_makers:
                if machine.get('state') == 'processing' and time.time() >= machine.get('finish_time', float('inf')):
                    collected_anything = True
                    original_crop_id = machine['input_key'].split('_', 1)[1]
                    
                    for _ in range(machine['input_qty']):
                        cfg = config.SEED_MAKER_CONFIG
                        roll = random.random()
                        if roll < cfg['chance_same_seed']:
                            amount = random.randint(cfg['min_same_seed'], cfg['max_same_seed'])
                            seed_key = f"seed_{original_crop_id}"
                            collected_summary[seed_key] = collected_summary.get(seed_key, 0) + amount
                        else:
                            rare_seed_id = "ancient_fruit"
                            seed_key = f"seed_{rare_seed_id}"
                            collected_summary[seed_key] = collected_summary.get(seed_key, 0) + 1
                    
                    machine['state'] = 'idle'
                    machine.pop('input_key', None); machine.pop('input_qty', None); machine.pop('finish_time', None)
            
            if not collected_anything:
                return await interaction.followup.send("Kh√¥ng c√≥ h·∫°t gi·ªëng n√†o s·∫µn s√†ng ƒë·ªÉ thu ho·∫°ch.", ephemeral=True)
                
            summary_lines = []
            for seed_key, quantity in collected_summary.items():
                user_data['inventory'].setdefault(seed_key, {})['0'] = user_data['inventory'].setdefault(seed_key, {}).get('0', 0) + quantity
                crop_id = seed_key.split('_', 1)[1]
                crop_info = config.CROPS[crop_id]
                summary_lines.append(f"‚Ä¢ {quantity} {crop_info['emoji']} H·∫°t {crop_info['display_name']}")
            
            embed = discord.Embed(
                title="üì¶ Thu ho·∫°ch t·ª´ M√°y m√≥c",
                description="B·∫°n ƒë√£ thu ho·∫°ch c√°c v·∫≠t ph·∫©m sau:",
                color=discord.Color.green()
            )
            embed.add_field(name="H·∫°t gi·ªëng nh·∫≠n ƒë∆∞·ª£c", value="\n".join(summary_lines))
            await interaction.followup.send(embed=embed)
            data_manager.save_player_data()
        except Exception as e:
            print(f"L·ªói trong l·ªánh /machine collect: {e}")
            await interaction.followup.send("C√≥ l·ªói x·∫£y ra.", ephemeral=True)

async def setup(bot):
    await bot.add_cog(MachineCommands(bot))
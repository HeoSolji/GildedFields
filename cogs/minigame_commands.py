# cogs/minigame_commands.py

import discord
from discord.ext import commands
from discord import app_commands
import random, asyncio
import data_manager, config, utils

class FishView(discord.ui.View):
    def __init__(self, author):
        super().__init__(timeout=3.0) # Ng∆∞·ªùi ch∆°i c√≥ 3 gi√¢y ƒë·ªÉ ph·∫£n ·ª©ng
        self.author = author
        self.caught = False
        self.message = None

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        if interaction.user.id != self.author.id:
            await interaction.response.send_message("ƒê√¢y kh√¥ng ph·∫£i c·∫ßn c√¢u c·ªßa b·∫°n!", ephemeral=True)
            return False
        return True

    async def on_timeout(self):
        # H√†m n√†y ƒë∆∞·ª£c g·ªçi khi 3 gi√¢y k·∫øt th√∫c m√† ng∆∞·ªùi d√πng ch∆∞a b·∫•m n√∫t
        if not self.caught and self.message:
            for item in self.children:
                item.disabled = True
            try:
                # C·ªë g·∫Øng ch·ªânh s·ª≠a tin nh·∫Øn ƒë·ªÉ th√¥ng b√°o c√° ƒë√£ ch·∫°y m·∫•t
                await self.message.edit(content="√îi kh√¥ng, c√° ƒë√£ ch·∫°y m·∫•t r·ªìi! üé£", view=self)
            except discord.NotFound:
                # B·ªè qua n·∫øu tin nh·∫Øn ƒë√£ b·ªã x√≥a
                pass
            except Exception as e:
                # In ra l·ªói n·∫øu c√≥ v·∫•n ƒë·ªÅ kh√°c, nh∆∞ng kh√¥ng l√†m bot crash
                print(f"L·ªói khi x·ª≠ l√Ω timeout c·ªßa FishView: {e}")

    @discord.ui.button(label="K√©o l√™n!", style=discord.ButtonStyle.primary, emoji="‚ùó")
    async def reel_in(self, interaction: discord.Interaction, button: discord.ui.Button):
        self.caught = True
        self.stop()

        fish_list = list(config.FISH.keys())
        rarity_weights = [config.FISH[f]['rarity'] for f in fish_list]
        chosen_fish_id = random.choices(fish_list, weights=rarity_weights, k=1)[0]
        fish_info = config.FISH[chosen_fish_id]

        user_data = data_manager.get_player_data(self.author.id)
        inventory_key = f"fish_{chosen_fish_id}"
        quality = utils.determine_quality()
        quality_str = str(quality)
        
        user_data['inventory'].setdefault(inventory_key, {})[quality_str] = user_data['inventory'].setdefault(inventory_key, {}).get(quality_str, 0) + 1
        data_manager.save_player_data()
        
        star_emoji = config.STAR_EMOJIS.get(quality, "")
        
        for item in self.children:
            item.disabled = True

        await interaction.response.edit_message(content=f"Ch√∫c m·ª´ng! B·∫°n ƒë√£ c√¢u ƒë∆∞·ª£c m·ªôt con **{fish_info['display_name']}{star_emoji}** {fish_info['emoji']}!", view=self)

class MinigameCommands(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    @app_commands.command(name="fish", description="Th·ª≠ v·∫≠n may c√¢u c√°!")
    @app_commands.checks.cooldown(1, config.FISHING_COOLDOWN, key=lambda i: i.user.id)
    async def fish(self, interaction: discord.Interaction):
        try:
            await interaction.response.send_message("B·∫°n ƒë√£ quƒÉng c√¢u v√† ƒëang ki√™n nh·∫´n ch·ªù ƒë·ª£i... üé£")
            message = await interaction.original_response()
            await asyncio.sleep(random.uniform(2.0, 7.0))
            view = FishView(interaction.user)
            await message.edit(content="**C·∫ÆN C√ÇU!!!**", view=view)
            view.message = message
        except Exception as e:
            print(f"L·ªói trong l·ªánh /fish: {e}")
            if not interaction.response.is_done():
                await interaction.response.send_message("ƒê√£ c√≥ l·ªói x·∫£y ra.", ephemeral=True)

    @fish.error
    async def on_fish_error(self, interaction: discord.Interaction, error: app_commands.AppCommandError):
        if isinstance(error, app_commands.CommandOnCooldown):
            await interaction.response.send_message(f"C·∫ßn c√¢u c·∫ßn ƒë∆∞·ª£c ngh·ªâ ng∆°i! Vui l√≤ng th·ª≠ l·∫°i sau **{round(error.retry_after, 1)} gi√¢y**.", ephemeral=True)
        else:
            print(f"Error in /fish command: {error}")
            if not interaction.response.is_done():
                await interaction.response.send_message("ƒê√£ c√≥ l·ªói x·∫£y ra.", ephemeral=True)
            else:
                await interaction.followup.send("ƒê√£ c√≥ l·ªói x·∫£y ra.", ephemeral=True)


async def setup(bot):
    await bot.add_cog(MinigameCommands(bot))
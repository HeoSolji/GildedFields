# cogs/progression_commands.py

import discord
from discord.ext import commands
from discord import app_commands # <-- Th√™m import n√†y
import data_manager
import config

class Progression(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @app_commands.command(name="profile", description="Xem h·ªì s∆° n√¥ng tr·∫°i c·ªßa b·∫°n ho·∫∑c c·ªßa ng∆∞·ªùi kh√°c.")
    @app_commands.describe(member="Ng∆∞·ªùi ch∆°i b·∫°n mu·ªën xem h·ªì s∆°. B·ªè tr·ªëng ƒë·ªÉ xem c·ªßa ch√≠nh b·∫°n.")
    async def profile(self, interaction: discord.Interaction, member: discord.Member = None):
        """Xem h·ªì s∆° n√¥ng tr·∫°i c·ªßa b·∫°n ho·∫∑c c·ªßa ng∆∞·ªùi kh√°c."""
        # N·∫øu kh√¥ng tag ai, target_user l√† ng∆∞·ªùi d√πng l·ªánh. Ng∆∞·ª£c l·∫°i l√† ng∆∞·ªùi ƒë∆∞·ª£c tag.
        target_user = member or interaction.user
        user_data = data_manager.get_player_data(target_user.id)

        if not user_data:
            await interaction.response.send_message(f"Ng∆∞·ªùi ch∆°i {target_user.mention} ch∆∞a ƒëƒÉng k√Ω game!", ephemeral=True)
            return

        level = user_data.get('level', 1)
        xp = user_data.get('xp', 0)
        xp_needed = config.get_xp_for_level(level)
        
        progress = int((xp / xp_needed) * 20) if xp_needed > 0 else 20
        progress_bar = '‚ñà' * progress + '‚îÄ' * (20 - progress)

        embed = discord.Embed(
            title=f"H·ªì s∆° c·ªßa {target_user.name}",
            color=discord.Color.blue()
        )
        embed.set_thumbnail(url=target_user.display_avatar.url)
        embed.add_field(name="C·∫•p ƒë·ªô", value=f"```{level}```", inline=True)
        embed.add_field(name="Ti·ªÅn", value=f"```{user_data['balance']} {config.CURRENCY_SYMBOL}```", inline=True)
        embed.add_field(
            name=f"Kinh nghi·ªám (XP)",
            value=f"`{xp} / {xp_needed}`\n`[{progress_bar}]`",
            inline=False
        )
        
        await interaction.response.send_message(embed=embed)

    @app_commands.command(name="leaderboard", description="Hi·ªÉn th·ªã b·∫£ng x·∫øp h·∫°ng nh·ªØng ng∆∞·ªùi ch∆°i gi√†u nh·∫•t.")
    async def leaderboard(self, interaction: discord.Interaction):
        """Hi·ªÉn th·ªã b·∫£ng x·∫øp h·∫°ng nh·ªØng ng∆∞·ªùi ch∆°i gi√†u nh·∫•t."""
        all_players = data_manager.GAME_DATA
        if not all_players:
            await interaction.response.send_message("Ch∆∞a c√≥ ng∆∞·ªùi ch∆°i n√†o ƒë·ªÉ x·∫øp h·∫°ng!")
            return
            
        sorted_players = sorted(
            all_players.items(), 
            key=lambda item: item[1].get('balance', 0), 
            reverse=True
        )

        embed = discord.Embed(title="üèÜ B·∫£ng X·∫øp H·∫°ng N√¥ng D√¢n Gi√†u C√≥ üèÜ", color=discord.Color.gold())
        
        description = []
        # D√πng interaction.guild.get_member ƒë·ªÉ l·∫•y th√¥ng tin trong server hi·ªán t·∫°i
        for i, (user_id, data) in enumerate(sorted_players[:10]):
            user = interaction.guild.get_member(int(user_id))
            user_name = user.name if user else f"Ng∆∞·ªùi ch∆°i (ID: {user_id})"
            
            rank_emoji = ["ü•á", "ü•à", "ü•â"]
            rank = rank_emoji[i] if i < 3 else f"**#{i+1}**"

            description.append(f"{rank} **{user_name}**: {data.get('balance', 0)} {config.CURRENCY_SYMBOL}")
        
        embed.description = "\n".join(description)
        await interaction.response.send_message(embed=embed)

    achievements_group = app_commands.Group(name="achievements", description="Xem c√°c th√†nh t·ª±u c·ªßa b·∫°n.")

    @achievements_group.command(name="view", description="Xem ti·∫øn ƒë·ªô t·∫•t c·∫£ c√°c th√†nh t·ª±u c√≥ th·ªÉ ƒë·∫°t ƒë∆∞·ª£c.")
    async def achievements_view(self, interaction: discord.Interaction):
        """Xem danh s√°ch th√†nh t·ª±u v√† ti·∫øn ƒë·ªô c·ªßa b·∫°n."""
        user_data = data_manager.get_player_data(interaction.user.id)
        if not user_data: return await interaction.response.send_message("B·∫°n ch∆∞a ƒëƒÉng k√Ω!", ephemeral=True)

        user_achievements = user_data.get('achievements', {"unlocked": [], "progress": {}})
        embed = discord.Embed(title=f"B·∫£ng th√†nh t·ª±u c·ªßa {interaction.user.name}", color=discord.Color.dark_gold())
        
        unlocked_lines = []
        locked_lines = []

        for ach_id, ach_info in config.ACHIEVEMENTS.items():
            # N·∫øu ƒë√£ m·ªü kh√≥a, lu√¥n hi·ªÉn th·ªã
            if ach_id in user_achievements['unlocked']:
                unlocked_lines.append(f"‚úÖ {ach_info['emoji']} **{ach_info['display_name']}** - _{ach_info['description']}_")
            
            # --- S·ª¨A L·ªñI LOGIC T·∫†I ƒê√ÇY ---
            # N·∫øu ch∆∞a m·ªü kh√≥a V√Ä kh√¥ng ph·∫£i l√† th√†nh t·ª±u ·∫©n, th√¨ m·ªõi hi·ªÉn th·ªã
            elif not ach_info.get("hidden", False):
                progress = user_achievements['progress'].get(ach_id, 0)
                target = ach_info.get('target_amount', 0)

                # X·ª≠ l√Ω c√°c lo·∫°i ti·∫øn ƒë·ªô kh√°c nhau
                if ach_info['type'] == 'balance':
                    progress = user_data.get('balance', 0)
                elif ach_info['type'] == 'farm_size':
                    progress = user_data.get('farm', {}).get('size', 0)
                elif ach_info['type'] == 'collection':
                    progress = len(user_achievements['progress'].get(ach_id, []))
                
                locked_lines.append(f"‚ùå {ach_info['emoji']} **{ach_info['display_name']}** - ({progress}/{target})")
        
        if unlocked_lines:
            embed.add_field(name="ƒê√£ M·ªü Kh√≥a", value="\n".join(unlocked_lines), inline=False)
        if locked_lines:
            embed.add_field(name="Ch∆∞a M·ªü Kh√≥a", value="\n".join(locked_lines), inline=False)
        
        embed.set_footer(text="M·ªôt s·ªë th√†nh t·ª±u s·∫Ω b·ªã ·∫©n cho ƒë·∫øn khi b·∫°n m·ªü kh√≥a ƒë∆∞·ª£c ch√∫ng!")
        await interaction.response.send_message(embed=embed, ephemeral=True)

    @achievements_group.command(name="unlocked", description="Hi·ªÉn th·ªã t·ªß c√∫p c·ªßa b·∫°n - nh·ªØng th√†nh t·ª±u ƒë√£ ƒë·∫°t ƒë∆∞·ª£c.")
    async def achievements_unlocked(self, interaction: discord.Interaction):
        """Hi·ªÉn th·ªã c√°c th√†nh t·ª±u ƒë√£ m·ªü kh√≥a m·ªôt c√°ch ƒë·∫πp m·∫Øt."""
        user_data = data_manager.get_player_data(interaction.user.id)
        if not user_data: return await interaction.response.send_message("B·∫°n ch∆∞a ƒëƒÉng k√Ω!", ephemeral=True)
        
        unlocked_ids_list = user_data.get('achievements', {}).get('unlocked', [])
        
        # --- SUPER DEBUG ---
        print("\n--- [SUPER DEBUG] B·∫Øt ƒë·∫ßu /achievements unlocked ---")
        print(f"D·ªØ li·ªáu g·ªëc t·ª´ file data: {unlocked_ids_list}")
        print(f"Ki·ªÉu d·ªØ li·ªáu c·ªßa n√≥ l√†: {type(unlocked_ids_list)}")
        # ---------------------

        unique_unlocked_ids = set(unlocked_ids_list)
        
        # --- SUPER DEBUG ---
        print(f"D·ªØ li·ªáu sau khi lo·∫°i b·ªè tr√πng l·∫∑p: {unique_unlocked_ids}")
        print(f"S·ªë l∆∞·ª£ng th√†nh t·ª±u duy nh·∫•t: {len(unique_unlocked_ids)}")
        print("------------------------------------------------\n")
        # ---------------------
        
        embed = discord.Embed(title=f"üèÜ T·ªß C√∫p c·ªßa {interaction.user.name} üèÜ", color=discord.Color.gold())

        if not unique_unlocked_ids:
            embed.description = "B·∫°n ch∆∞a m·ªü kh√≥a ƒë∆∞·ª£c th√†nh t·ª±u n√†o. H√£y ti·∫øp t·ª•c c·ªë g·∫Øng!"
        else:
            total_achievements = len(config.ACHIEVEMENTS)
            embed.description = f"B·∫°n ƒë√£ m·ªü kh√≥a **{len(unique_unlocked_ids)}** tr√™n t·ªïng s·ªë **{total_achievements}** th√†nh t·ª±u!"
            
            for ach_id in unique_unlocked_ids:
                ach_info = config.ACHIEVEMENTS.get(ach_id)
                if ach_info:
                    embed.add_field(
                        name=f"{ach_info['emoji']} {ach_info['display_name']}",
                        value=f"_{ach_info['description']}_",
                        inline=True
                    )
        
        await interaction.response.send_message(embed=embed)
        
    @app_commands.command(name="reputation", description="Xem ƒëi·ªÉm th√¢n thi·ªán c·ªßa b·∫°n v·ªõi c√°c d√¢n l√†ng.")
    async def reputation(self, interaction: discord.Interaction):
        user_data = data_manager.get_player_data(interaction.user.id)
        if not user_data: return await interaction.response.send_message("B·∫°n ch∆∞a ƒëƒÉng k√Ω!", ephemeral=True)

        reputation_data = user_data.get('quests', {}).get('reputation', {})
        embed = discord.Embed(title=f"‚ù§Ô∏è B·∫£ng Th√¢n thi·ªán c·ªßa {interaction.user.name}", color=discord.Color.pink())
        
        if not reputation_data:
            embed.description = "B·∫°n ch∆∞a l√†m quen v·ªõi ai c·∫£."
        else:
            lines = []
            for npc_id, points in reputation_data.items():
                npc_info = config.QUEST_NPCS.get(npc_id, {})
                lines.append(f"**{npc_info.get('emoji', '')} {npc_info.get('name', '???')}**: {points} ƒëi·ªÉm")
            embed.description = "\n".join(lines)
        
        await interaction.response.send_message(embed=embed)
async def setup(bot):
    await bot.add_cog(Progression(bot))
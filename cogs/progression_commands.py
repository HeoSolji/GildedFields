# cogs/progression_commands.py

import discord
from discord.ext import commands
from discord import app_commands # <-- Th√™m import n√†y
import data_manager
import config

class Progression(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @app_commands.command(name="profile", description="Xem h·ªì s∆° n√¥ng tr·∫°i c·ªßa b·∫°n ho·∫∑c c·ªßa ng∆∞·ªùi kh√°c.")
    @app_commands.describe(member="Ng∆∞·ªùi ch∆°i b·∫°n mu·ªën xem h·ªì s∆°. B·ªè tr·ªëng ƒë·ªÉ xem c·ªßa ch√≠nh b·∫°n.")
    async def profile(self, interaction: discord.Interaction, member: discord.Member = None):
        """Xem h·ªì s∆° n√¥ng tr·∫°i c·ªßa b·∫°n ho·∫∑c c·ªßa ng∆∞·ªùi kh√°c."""
        # N·∫øu kh√¥ng tag ai, target_user l√† ng∆∞·ªùi d√πng l·ªánh. Ng∆∞·ª£c l·∫°i l√† ng∆∞·ªùi ƒë∆∞·ª£c tag.
        target_user = member or interaction.user
        user_data = data_manager.get_player_data(target_user.id)

        if not user_data:
            await interaction.response.send_message(f"Ng∆∞·ªùi ch∆°i {target_user.mention} ch∆∞a ƒëƒÉng k√Ω game!", ephemeral=True)
            return

        level = user_data.get('level', 1)
        xp = user_data.get('xp', 0)
        xp_needed = config.get_xp_for_level(level)
        
        progress = int((xp / xp_needed) * 20) if xp_needed > 0 else 20
        progress_bar = '‚ñà' * progress + '‚îÄ' * (20 - progress)

        embed = discord.Embed(
            title=f"H·ªì s∆° c·ªßa {target_user.name}",
            color=discord.Color.blue()
        )
        embed.set_thumbnail(url=target_user.display_avatar.url)
        embed.add_field(name="C·∫•p ƒë·ªô", value=f"```{level}```", inline=True)
        embed.add_field(name="Ti·ªÅn", value=f"```{user_data['balance']} {config.CURRENCY_SYMBOL}```", inline=True)
        embed.add_field(
            name=f"Kinh nghi·ªám (XP)",
            value=f"`{xp} / {xp_needed}`\n`[{progress_bar}]`",
            inline=False
        )
        
        await interaction.response.send_message(embed=embed)

    @app_commands.command(name="leaderboard", description="Hi·ªÉn th·ªã b·∫£ng x·∫øp h·∫°ng nh·ªØng ng∆∞·ªùi ch∆°i gi√†u nh·∫•t.")
    async def leaderboard(self, interaction: discord.Interaction):
        """Hi·ªÉn th·ªã b·∫£ng x·∫øp h·∫°ng nh·ªØng ng∆∞·ªùi ch∆°i gi√†u nh·∫•t."""
        all_players = data_manager.GAME_DATA
        if not all_players:
            await interaction.response.send_message("Ch∆∞a c√≥ ng∆∞·ªùi ch∆°i n√†o ƒë·ªÉ x·∫øp h·∫°ng!")
            return
            
        sorted_players = sorted(
            all_players.items(), 
            key=lambda item: item[1].get('balance', 0), 
            reverse=True
        )

        embed = discord.Embed(title="üèÜ B·∫£ng X·∫øp H·∫°ng N√¥ng D√¢n Gi√†u C√≥ üèÜ", color=discord.Color.gold())
        
        description = []
        # D√πng interaction.guild.get_member ƒë·ªÉ l·∫•y th√¥ng tin trong server hi·ªán t·∫°i
        for i, (user_id, data) in enumerate(sorted_players[:10]):
            user = interaction.guild.get_member(int(user_id))
            user_name = user.name if user else f"Ng∆∞·ªùi ch∆°i (ID: {user_id})"
            
            rank_emoji = ["ü•á", "ü•à", "ü•â"]
            rank = rank_emoji[i] if i < 3 else f"**#{i+1}**"

            description.append(f"{rank} **{user_name}**: {data.get('balance', 0)} {config.CURRENCY_SYMBOL}")
        
        embed.description = "\n".join(description)
        await interaction.response.send_message(embed=embed)


async def setup(bot):
    await bot.add_cog(Progression(bot))
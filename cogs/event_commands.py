# cogs/event_commands.py

import discord
from discord.ext import commands
from discord import app_commands
import random
import data_manager
import config

class EventCommands(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    # T·∫°o m·ªôt nh√≥m l·ªánh cha cho /event
    event = app_commands.Group(name="event", description="C√°c l·ªánh ƒë·ªÉ qu·∫£n l√Ω s·ª± ki·ªán trong game (ch·ªâ d√†nh cho ch·ªß bot).")

    @event.command(name="storm", description="T·∫°o ra m·ªôt c∆°n b√£o ph√° h·ªßy m·ªôt ph·∫ßn c√¢y tr·ªìng.")
    @commands.is_owner() # <-- S·ª¨A L·ªñI: D√πng decorator ƒë√∫ng t·ª´ 'commands'
    @app_commands.describe(damage_percentage="T·ªâ l·ªá c√¢y tr·ªìng b·ªã ph√° h·ªßy (v√≠ d·ª•: 20 cho 20%).")
    async def event_storm(self, interaction: discord.Interaction, damage_percentage: app_commands.Range[int, 1, 100]):
        await interaction.response.send_message(f"‚è≥ ƒêang th·ª±c thi s·ª± ki·ªán **C∆°n B√£o** v·ªõi t·ªâ l·ªá ph√° h·ªßy {damage_percentage}%...", ephemeral=True)

        # G·ª≠i th√¥ng b√°o s·ª± ki·ªán t·ªõi k√™nh chung
        announcement_channel_id = config.MARKET_EVENT_CHANNEL_ID
        if announcement_channel_id:
            try:
                channel = await self.bot.fetch_channel(announcement_channel_id)
                embed = discord.Embed(
                    title="üå™Ô∏è TIN KH·∫®N C·∫§P: B√ÉO ƒê·ªî B·ªò!",
                    description="M·ªôt c∆°n b√£o b·∫•t ng·ªù ƒëang qu√©t qua khu v·ª±c! M·ªôt s·ªë c√¢y tr·ªìng c√≥ th·ªÉ ƒë√£ b·ªã h∆∞ h·∫°i. H√£y ki·ªÉm tra l·∫°i n√¥ng tr·∫°i c·ªßa b·∫°n!",
                    color=discord.Color.dark_grey()
                )
                await channel.send(embed=embed)
            except Exception as e:
                print(f"Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o s·ª± ki·ªán b√£o: {e}")

        # Logic ph√° h·ªßy c√¢y tr·ªìng
        all_players_data = data_manager.GAME_DATA
        total_destroyed_plots = 0
        affected_farms = 0

        for user_id, user_data in all_players_data.items():
            farm_plots = user_data.get('farm', {}).get('plots', {})
            
            planted_plots_keys = [key for key, plot in farm_plots.items() if plot is not None and "crop" in plot]
            
            if not planted_plots_keys:
                continue

            num_to_destroy = round(len(planted_plots_keys) * (damage_percentage / 100))
            if num_to_destroy == 0 and len(planted_plots_keys) > 0 and damage_percentage > 0:
                num_to_destroy = 1

            if num_to_destroy > 0:
                plots_to_destroy = random.sample(planted_plots_keys, k=min(num_to_destroy, len(planted_plots_keys)))

                if plots_to_destroy:
                    affected_farms += 1
                    for plot_key in plots_to_destroy:
                        farm_plots[plot_key] = None
                        total_destroyed_plots += 1
        
        data_manager.save_player_data()

        await interaction.followup.send(f"‚úÖ S·ª± ki·ªán **C∆°n B√£o** ƒë√£ k·∫øt th√∫c! T·ªïng c·ªông **{total_destroyed_plots}** c√¢y tr·ªìng tr√™n **{affected_farms}** n√¥ng tr·∫°i ƒë√£ b·ªã ph√° h·ªßy.", ephemeral=True)

    # B·∫Øt l·ªói n·∫øu ng∆∞·ªùi d√πng kh√¥ng ph·∫£i ch·ªß bot
    @event_storm.error
    async def on_storm_error(self, interaction: discord.Interaction, error: app_commands.AppCommandError):
        # S·ª¨A L·ªñI: B·∫Øt ƒë√∫ng lo·∫°i l·ªói CheckFailure
        if isinstance(error, app_commands.CheckFailure):
            await interaction.response.send_message("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!", ephemeral=True)
        else:
            await interaction.response.send_message("ƒê√£ c√≥ l·ªói x·∫£y ra.", ephemeral=True)
            print(error)


async def setup(bot):
    await bot.add_cog(EventCommands(bot))
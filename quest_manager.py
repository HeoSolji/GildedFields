# quest_manager.py
import time, random, math
import config, data_manager, season_manager

SECONDS_IN_A_DAY = 86400

def get_new_quests(user_data):
    """L√†m m·ªõi nhi·ªám v·ª• h√†ng ng√†y cho ng∆∞·ªùi ch∆°i m·ªôt c√°ch th√¥ng minh theo m√πa."""
    user_quests = user_data.setdefault('quests', {})
    last_updated = user_quests.get('last_updated', 0)
    
    if time.time() - last_updated < SECONDS_IN_A_DAY:
    # if False:
        return

    print(f"L√†m m·ªõi nhi·ªám v·ª• cho ng∆∞·ªùi ch∆°i...")
    
    # --- LOGIC M·ªöI: NH·∫¨N BI·∫æT M√ôA ---
    current_season = season_manager.get_current_season()['name']
    
    # L·ªçc kho nhi·ªám v·ª• h√†ng ng√†y ƒë·ªÉ ch·ªâ l·∫•y c√°c nhi·ªám v·ª• h·ª£p l·ªá v·ªõi m√πa hi·ªán t·∫°i
    available_daily_pool = []
    for quest_template in config.QUEST_POOL['daily']:
        quest_type = quest_template.get('type')
        target_id = quest_template.get('target_id')
        
        # N·∫øu l√† nhi·ªám v·ª• thu th·∫≠p, ki·ªÉm tra xem v·∫≠t ph·∫©m c√≥ ki·∫øm ƒë∆∞·ª£c trong m√πa kh√¥ng
        if quest_type == 'collect' and target_id:
            item_type = target_id.split('_', 1)[0]
            item_name = target_id.split('_', 1)[1]
            
            if item_type == 'harvest': # N·∫øu l√† n√¥ng s·∫£n
                crop_info = config.CROPS.get(item_name)
                if crop_info and current_season in crop_info.get('seasons', []):
                    available_daily_pool.append(quest_template)
            
            # (C√≥ th·ªÉ th√™m logic t∆∞∆°ng t·ª± cho c√°, etc. n·∫øu c·∫ßn)
            else: # M·∫∑c ƒë·ªãnh cho ph√©p c√°c lo·∫°i kh√°c nh∆∞ tr·ª©ng, s·ªØa...
                 available_daily_pool.append(quest_template)
        
        else: # N·∫øu l√† nhi·ªám v·ª• h√†nh ƒë·ªông (action), lu√¥n cho ph√©p
            available_daily_pool.append(quest_template)
    
    # --------------------------------

    user_quests['daily'] = []
    
    # X√≥a nhi·ªám v·ª• ƒë·∫∑c bi·ªát ƒë√£ h·∫øt h·∫°n
    special = user_quests.get('special')
    if special and time.time() >= special.get('expires_at', float('inf')):
        user_quests['special'] = None

    # T·∫°o nhi·ªám v·ª• h√†ng ng√†y m·ªõi
    if available_daily_pool:
        chosen_quests = random.sample(available_daily_pool, k=min(config.QUEST_CONFIG['daily_quest_count'], len(available_daily_pool)))
        for quest_data in chosen_quests:
            new_quest = quest_data.copy()
            new_quest['progress'] = 0
            user_quests['daily'].append(new_quest)

    # C∆° h·ªôi t·∫°o nhi·ªám v·ª• ƒë·∫∑c bi·ªát m·ªõi (n·∫øu ch∆∞a c√≥)
    if not user_quests.get('special') and random.random() < config.QUEST_CONFIG['special_bounty_chance']:
        special_pool = config.QUEST_POOL['special']
        chosen_bounty = random.choice(special_pool).copy()
        chosen_bounty['progress'] = 0
        chosen_bounty['expires_at'] = time.time() + (chosen_bounty['duration_days'] * SECONDS_IN_A_DAY)
        user_quests['special'] = chosen_bounty

    user_quests['last_updated'] = time.time()

def check_reputation_rewards(user_data, npc_id):
    """
    Ki·ªÉm tra c√°c m·ªëc ph·∫ßn th∆∞·ªüng, c·∫≠p nh·∫≠t d·ªØ li·ªáu v√† tr·∫£ v·ªÅ danh s√°ch c√°c ph·∫ßn th∆∞·ªüng v·ª´a m·ªü kh√≥a.
    H√†m n√†y kh√¥ng c√≤n l√† async v√† kh√¥ng g·ª≠i tin nh·∫Øn.
    """
    newly_unlocked_rewards = []
    user_quests = user_data.setdefault('quests', {})
    user_rep = user_quests.setdefault('reputation', {}).get(npc_id, 0)
    
    npc_rewards = config.REPUTATION_REWARDS.get(npc_id, {})
    
    for rep_level, reward_info in npc_rewards.items():
        if user_rep >= rep_level:
            reward_type = reward_info['type']
            
            if reward_type == 'recipe':
                reward_id = reward_info.get('id')
                unlocked_list = user_quests.setdefault('unlocked_recipes', [])
                if reward_id not in unlocked_list:
                    unlocked_list.append(reward_id)
                    newly_unlocked_rewards.append(reward_info) # Th√™m v√†o danh s√°ch b√°o c√°o
            
            elif reward_type == 'gift':
                reward_id = f"gift_{npc_id}_{rep_level}"
                unlocked_list = user_quests.setdefault('unlocked_gifts', [])
                if reward_id not in unlocked_list:
                    unlocked_list.append(reward_id)
                    item_key = reward_info.get('item_key')
                    amount = reward_info.get('amount', 1)
                    user_data['inventory'].setdefault(item_key, {})['0'] = user_data['inventory'].setdefault(item_key, {}).get('0', 0) + amount
                    newly_unlocked_rewards.append(reward_info) # Th√™m v√†o danh s√°ch b√°o c√°o

    return newly_unlocked_rewards

async def update_quest_progress(interaction, event_type, **kwargs):
    """
    C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô nhi·ªám v·ª• h√†nh ƒë·ªông v√† t·ª± ƒë·ªông ho√†n th√†nh n·∫øu ƒë·ªß ƒëi·ªÅu ki·ªán.
    """
    user_data = data_manager.get_player_data(interaction.user.id)
    if not user_data: return

    user_quests = user_data.setdefault('quests', {})
    active_quests = user_quests.get('daily', []) + ([user_quests.get('special')] if user_quests.get('special') else [])
    
    quest_completed_this_action = False
    for quest in active_quests:
        # D√πng quest_id ƒë·ªÉ tra c·ª©u th√¥ng tin g·ªëc t·ª´ config, ƒë·∫£m b·∫£o lu√¥n m·ªõi nh·∫•t
        quest_id = quest.get('id')
        quest_template = next((q for q_list in config.QUEST_POOL.values() for q in q_list if q['id'] == quest_id), None)
        
        # B·ªè qua n·∫øu kh√¥ng t√¨m th·∫•y quest trong config ho·∫∑c kh√¥ng ph·∫£i lo·∫°i h√†nh ƒë·ªông
        if not quest_template or quest_template.get('type') != event_type:
            continue

        # TƒÉng ti·∫øn ƒë·ªô
        quest['progress'] = quest.get('progress', 0) + kwargs.get('amount', 1)
        
        # Ki·ªÉm tra ho√†n th√†nh
        if quest['progress'] >= quest_template.get('target_amount', float('inf')):
            quest_completed_this_action = True
            
            # X√≥a nhi·ªám v·ª• kh·ªèi danh s√°ch ƒëang ho·∫°t ƒë·ªông
            if quest in user_quests.get('daily', []):
                user_quests['daily'].remove(quest)
            elif quest == user_quests.get('special'):
                user_quests['special'] = None
            
            # Trao th∆∞·ªüng
            reward = quest_template.get('reward', {})
            user_data['balance'] += reward.get('money', 0)
            user_data['xp'] += reward.get('xp', 0)
            npc_id = quest_template.get('npc')

            if npc_id:
                rep_data = user_quests.setdefault('reputation', {})
                rep_data[npc_id] = rep_data.get(npc_id, 0) + reward.get('rep', 0)
                
                # Ki·ªÉm tra ph·∫ßn th∆∞·ªüng th√¢n thi·ªán v√† g·ª≠i th√¥ng b√°o n·∫øu c√≥
                newly_unlocked = check_reputation_rewards(user_data, npc_id)
                for reward_info in newly_unlocked:
                    npc_name = config.QUEST_NPCS.get(npc_id, {}).get('name', 'M·ªôt ng∆∞·ªùi b·∫°n')
                    embed = discord.Embed(color=discord.Color.green())
                    
                    if reward_info['type'] == 'recipe':
                        recipe_name = config.RECIPES.get(reward_info['id'], {}).get('display_name', 'b√≠ m·∫≠t')
                        embed.title=f"üì¨ B·∫°n c√≥ th∆∞ t·ª´ {npc_name}!"
                        embed.description = f"\"_{reward_info['message']}_\"\n\nB·∫°n ƒë√£ h·ªçc ƒë∆∞·ª£c c√¥ng th·ª©c ch·∫ø t·∫°o **{recipe_name}**!"
                    
                    elif reward_info['type'] == 'gift':
                        item_key = reward_info.get('item_key')
                        item_type, item_id = item_key.split('_', 1)
                        item_info = config.CROPS.get(item_id) if item_type == 'seed' else config.PRODUCTS.get(item_id, {})
                        item_name = f"H·∫°t {item_info['display_name']}" if item_type == 'seed' else item_info.get('display_name', '?')
                        item_emoji = item_info.get('emoji', 'üéÅ')
                        embed.title=f"üéÅ B·∫°n c√≥ qu√† t·ª´ {npc_name}!"
                        embed.description = f"\"_{reward_info['message']}_\"\n\nB·∫°n nh·∫≠n ƒë∆∞·ª£c **{reward_info['amount']} {item_emoji} {item_name}**!"
                        embed.color = discord.Color.blue()
                    
                    try:
                        await interaction.user.send(embed=embed)
                    except discord.Forbidden:
                        await interaction.channel.send(f"{interaction.user.mention}, b·∫°n c√≥ th∆∞ m·ªõi nh∆∞ng t√¥i kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn ri√™ng cho b·∫°n!")

            # G·ª≠i th√¥ng b√°o ho√†n th√†nh nhi·ªám v·ª•
            npc_info = config.QUEST_NPCS.get(npc_id, {})
            completion_embed = discord.Embed(title=f"‚úÖ Nhi·ªám v·ª• Ho√†n th√†nh!", color=discord.Color.green())
            completion_embed.description = f"B·∫°n ƒë√£ t·ª± ƒë·ªông ho√†n th√†nh nhi·ªám v·ª• **'{quest_template.get('title')}'** cho {npc_info.get('name')} {npc_info.get('emoji')}."
            await interaction.channel.send(embed=completion_embed)
    
    if quest_completed_this_action:
        data_manager.save_player_data()